# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

Parser.check_for_encoding_support

module Parser
  class RubyMotion < Parser::Base


  def version
    19 # closest released match: v1_9_0_2
  end

  def default_encoding
    Encoding::BINARY
  end
##### State transition tables begin ###

clist = [
'-448,5,63,64,65,7,51,-448,-448,-448,57,58,-448,-448,-448,61,-448,59',
'60,62,23,24,66,67,-448,270,-448,-448,-448,22,28,27,90,89,91,92,-448',
'-448,17,-448,-448,-448,-448,-448,6,41,8,9,94,93,95,84,50,86,85,87,549',
'88,96,97,528,82,83,38,39,37,-448,-448,-448,-448,-448,-448,-448,-448',
'-448,-448,-448,-448,-448,-448,98,449,-448,-448,-448,36,-448,-448,30',
'-86,-448,52,53,-448,-448,54,-448,32,-448,570,-448,40,-448,-448,-448',
'-448,-448,-448,-448,18,-448,269,-448,-93,81,73,76,77,205,78,79,193,653',
'749,74,80,-448,-448,-448,-448,-451,-448,56,-448,75,-448,-92,-451,-451',
'-451,-461,201,-451,-451,-451,680,-451,540,528,-80,194,541,528,602,-451',
'206,-451,-451,-451,202,203,548,569,663,195,-88,-451,-451,680,-451,-451',
'-451,-451,-451,102,528,528,-88,-90,101,-90,102,202,203,-85,-87,101,601',
'102,-86,-93,602,196,101,-78,-87,-451,-451,-451,-451,-451,-451,-451,-451',
'-451,-451,-451,-451,-451,-451,602,664,-451,-451,-451,-80,-451,-451,-85',
'197,-451,-89,-82,-451,-451,601,-451,652,-451,244,-451,680,-451,-451',
'-451,-451,-451,-451,-451,-526,-451,-84,-451,294,601,102,-526,-526,-526',
'206,101,-80,-526,-526,-80,-526,-451,-451,-451,-451,-80,-451,102,-451',
'-526,-451,102,101,102,796,-80,101,102,101,270,-526,-526,101,-526,-526',
'-526,-526,-526,202,203,-82,295,-89,-82,102,102,-88,-90,-91,101,101,-88',
'-90,-522,-87,-79,644,206,534,-87,-526,-526,-526,-526,-526,-526,-526',
'-526,-526,-526,-526,-526,-526,-526,202,203,-526,-526,-526,-82,587,-461',
'-82,414,-526,483,102,-526,-82,559,-89,101,-526,265,-526,-89,-526,-526',
'-526,-526,-526,-526,-526,-279,-526,-526,-526,-522,663,483,-279,-279',
'-279,-523,731,269,-279,-279,582,-279,-526,-526,73,-81,-78,-526,270,-73',
'206,-89,-86,74,-93,-59,-92,496,-519,361,495,-279,-279,75,-279,-279,-279',
'-279,-279,-81,262,602,561,560,-84,-83,373,263,823,559,-92,712,413,-80',
'415,-88,206,-392,416,-88,205,-279,-279,-279,-279,-279,-279,-279,-279',
'-279,-279,-279,-279,-279,-279,601,559,-279,-279,-279,-448,590,265,496',
'445,-279,498,-448,-279,559,-520,732,-519,-279,447,-279,-448,-279,-279',
'-279,-279,-279,-279,-279,269,-279,813,-279,102,-392,561,560,557,101',
'-519,-526,-392,449,102,559,-526,-279,-279,101,-83,-392,-279,-526,-526',
'-526,-91,456,-526,-526,-526,583,-526,561,560,562,-90,496,-451,-392,498',
'-526,-526,-526,-526,-451,561,560,564,-526,-520,-87,-526,-526,-451,-526',
'-526,-526,-526,-526,202,203,671,-526,511,510,509,515,512,559,-526,-58',
'-520,206,-82,-522,561,560,566,-526,-90,468,-526,-526,-526,-526,-526',
'-526,-526,-526,-526,-526,-526,-526,-526,-526,469,-526,-526,-526,-526',
'-526,733,-526,-448,476,-526,720,-526,-526,-526,-448,-526,-522,-526,274',
'-526,-526,-526,-526,-526,-526,-526,-526,-526,206,-526,-526,-526,-451',
'561,560,571,102,496,-526,-451,498,101,225,787,199,-526,-526,-526,-526',
'-279,-526,200,-526,-79,-89,265,-279,-279,-279,-87,198,-279,-279,-279',
'742,-279,511,510,509,515,512,296,297,480,222,-279,-279,-279,224,223',
'220,221,478,479,484,-279,-279,-458,-279,-279,-279,-279,-279,671,-458',
'511,510,509,515,512,671,517,511,510,509,515,512,-457,202,203,521,520',
'524,523,-457,-279,-279,-279,-279,-279,-279,-279,-279,-279,-279,-279',
'-279,-279,-279,202,203,-279,-279,-279,-322,590,-279,667,485,-279,225',
'-322,-279,-279,655,-279,670,-279,491,-279,-322,-279,-279,-279,-279,-279',
'-279,-279,492,-279,225,-279,499,514,500,511,510,509,515,512,449,898',
'-459,534,-456,-279,-279,-279,-279,-459,-279,-456,-279,363,-91,5,63,64',
'65,7,51,-453,222,538,57,58,224,223,-453,61,517,59,60,62,23,24,66,67',
'539,521,520,524,523,22,28,27,90,89,91,92,370,574,17,791,644,372,371',
'576,6,41,8,9,94,93,95,84,50,86,85,87,575,88,96,97,578,82,83,38,39,37',
'225,229,234,235,236,231,233,241,242,237,238,410,218,219,-460,-259,239',
'240,411,36,225,-460,276,102,206,52,53,412,101,54,-460,32,222,265,228',
'40,224,223,220,221,232,230,226,18,227,791,644,592,81,73,76,77,222,78',
'79,225,224,223,74,80,-454,243,-274,-226,225,-455,56,-454,75,-274,-274',
'-274,-455,225,-274,-274,-274,514,-274,511,510,509,515,512,225,225,206',
'222,-274,-274,-274,224,223,220,221,206,206,-73,-274,-274,554,-274,-274',
'-274,-274,-274,671,555,511,510,509,515,512,626,517,503,671,206,511,510',
'509,515,512,521,520,524,523,489,-274,-274,-274,-274,-274,-274,-274,-274',
'-274,-274,-274,-274,-274,-274,637,667,-274,-274,-274,474,644,-274,206',
'655,-274,667,475,-274,-274,657,-274,659,-274,662,-274,473,-274,-274',
'-274,-274,-274,-274,-274,-273,-274,665,-274,673,486,674,-273,676,706',
'707,534,487,708,96,97,-273,-274,-274,-274,-274,412,-274,683,-274,5,63',
'64,65,7,51,711,714,536,57,58,-260,721,456,61,537,59,60,62,23,24,66,67',
'456,535,206,735,746,22,28,27,90,89,91,92,449,671,17,511,510,509,515',
'512,6,41,8,9,94,93,95,84,50,86,85,87,447,88,96,97,206,82,83,38,39,37',
'671,637,511,510,509,515,512,671,667,511,510,509,515,512,544,206,-280',
'670,265,36,265,543,30,-280,637,52,53,225,225,54,545,32,-280,760,-259',
'40,671,667,511,510,509,515,512,18,517,764,855,655,81,73,76,77,782,78',
'79,524,523,785,74,80,5,63,64,65,7,51,56,663,75,57,58,206,644,517,61',
'795,59,60,62,23,24,66,67,206,524,523,206,804,22,28,27,90,89,91,92,-261',
'671,17,511,510,509,515,512,6,41,8,9,94,93,95,84,50,86,85,87,815,88,96',
'97,817,82,83,38,39,37,671,820,511,510,509,515,512,671,667,511,510,509',
'515,512,-280,821,-279,-460,655,36,824,-280,30,-279,-460,52,53,206,-523',
'54,-280,32,-279,-460,831,40,671,667,511,510,509,515,512,18,517,832,637',
'840,81,73,76,77,841,78,79,524,523,206,74,80,5,63,64,65,7,51,56,843,75',
'57,58,844,847,517,61,849,59,60,62,23,24,66,67,851,524,523,851,206,22',
'28,27,90,89,91,92,856,671,17,511,510,509,515,512,6,41,8,9,94,93,95,84',
'50,86,85,87,858,88,96,97,860,82,83,38,39,37,772,866,511,510,509,868',
'512,671,667,511,510,509,515,512,889,206,-279,-273,871,36,-262,890,30',
'-279,-273,52,53,878,-523,54,888,32,-279,-273,882,40,671,883,511,510',
'509,515,512,18,517,885,447,891,81,73,76,77,900,78,79,524,523,902,74',
'80,5,63,64,65,7,51,56,903,75,57,58,908,910,517,61,913,59,60,62,23,24',
'66,67,915,524,523,851,851,22,28,27,90,89,91,92,919,772,17,511,510,509',
'491,512,6,41,8,9,94,93,95,84,50,86,85,87,928,88,96,97,851,82,83,38,39',
'37,851,544,104,105,106,107,108,671,918,511,510,509,515,512,-280,851',
'-279,545,932,36,900,-280,30,-279,447,52,53,206,-523,54,-280,32,-279',
'900,948,40,671,949,511,510,509,515,512,18,517,951,851,851,81,73,76,77',
'851,78,79,524,523,-523,74,80,5,63,64,65,7,51,56,-522,75,57,58,851,900',
'517,61,851,59,60,62,23,24,66,67,,524,523,,,22,28,27,90,89,91,92,,,17',
'104,105,106,107,108,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83',
'38,39,37,225,104,105,106,107,108,,671,,511,510,509,515,512,,,239,240',
',36,,,276,,,52,53,,,54,,32,222,,228,40,224,223,220,221,,,,18,517,,,',
'81,73,76,77,,78,79,524,523,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61',
',59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,579,6,41,8',
'9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,225,229,234,235',
'236,231,233,241,242,237,238,,218,219,,,239,240,,36,,,276,,,52,53,,,54',
',32,222,,228,40,224,223,220,221,232,230,226,18,227,,,,81,73,76,77,,78',
'79,,,,74,80,,243,-527,,,,56,,75,-527,-527,-527,,,-527,-527,-527,514',
'-527,511,510,509,515,512,,,,-527,-527,-527,-527,,,,,,,,-527,-527,,-527',
'-527,-527,-527,-527,,,,,,,,,517,701,,,,,,,,521,520,524,523,,-527,-527',
'-527,-527,-527,-527,-527,-527,-527,-527,-527,-527,-527,-527,,,-527,-527',
'-527,,,-527,,,-527,,,-527,-527,,-527,,-527,,-527,,-527,-527,-527,-527',
'-527,-527,-527,-528,-527,-527,-527,,,,-528,-528,-528,,,-528,-528,-528',
'225,-528,-527,-527,-527,-527,,-527,,-527,-528,-528,-528,-528,,,239,240',
',,,-528,-528,,-528,-528,-528,-528,-528,,,,222,,228,,224,223,220,221',
',,226,,227,,,,,,,-528,-528,-528,-528,-528,-528,-528,-528,-528,-528,-528',
'-528,-528,-528,,,-528,-528,-528,,,-528,,,-528,,,-528,-528,,-528,,-528',
',-528,,-528,-528,-528,-528,-528,-528,-528,,-528,-528,-528,,,,,,,,,,',
',,,-528,-528,-528,-528,,-528,,-528,5,63,64,65,7,51,,,,57,58,,,,61,,59',
'60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93',
'95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,225,229,234,235,236,231',
'233,241,242,237,238,,-545,-545,,,239,240,,36,,,30,,,52,53,,,54,,32,222',
',228,40,224,223,220,221,232,230,226,18,227,,,,81,73,76,77,,78,79,,,',
'74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,',
'22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88',
'96,97,,82,83,38,39,37,225,229,234,235,236,231,233,241,242,237,238,,-545',
'-545,,,239,240,,36,,,30,,,52,53,,,54,,32,222,,228,40,224,223,220,221',
'232,230,226,18,227,,,,81,73,76,77,,78,79,,,,74,80,5,63,64,65,7,51,56',
',75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17',
',,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,225',
'-545,-545,-545,-545,231,233,,,-545,-545,,,,,,239,240,,36,,,30,,,52,53',
',,54,,32,222,,228,40,224,223,220,221,232,230,226,18,227,,,,81,73,76',
'77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62,23,24',
'66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86',
'85,87,,88,96,97,,82,83,38,39,37,225,,,,,,,,,,,,,,,,239,240,,36,,,30',
',,52,53,,,54,,32,222,,228,40,224,223,220,221,,,226,18,227,,,,81,73,76',
'77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62,23,24',
'66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86',
'85,87,,88,96,97,,82,83,38,39,37,225,,,,,,,,,,,,,,,,239,240,,36,,,30',
',,52,53,,,54,,32,222,,228,40,224,223,220,221,,,226,18,227,,,,81,73,76',
'77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62,23,24',
'66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86',
'85,87,,88,96,97,,82,83,38,39,37,225,,,,,,,,,,,,,,,,239,240,,36,,,30',
',,52,53,,,54,,32,222,,228,40,224,223,220,221,,,226,18,227,,,,81,73,76',
'77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62,23,24',
'66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86',
'85,87,,88,96,97,,82,83,38,39,37,225,-545,-545,-545,-545,231,233,,,-545',
'-545,,,,,,239,240,,36,,,30,,,52,53,,,54,,32,222,,228,40,224,223,220',
'221,232,230,226,18,227,,,,81,73,76,77,,78,79,,,,74,80,5,63,64,65,7,51',
'56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,',
',17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37',
'225,-545,-545,-545,-545,231,233,,,-545,-545,,,,,,239,240,,36,,,30,,',
'52,53,,,54,,32,222,,228,40,224,223,220,221,232,230,226,18,227,,,,81',
'73,76,77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62',
'23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,225,-545,-545,-545,-545,231,233',
',,-545,-545,,,,,,239,240,,36,,,30,,,52,53,,,54,,32,222,,228,40,224,223',
'220,221,232,230,226,18,227,,,,81,73,76,77,,78,79,,,,74,80,5,63,64,65',
'7,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91',
'92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39',
'37,225,-545,-545,-545,-545,231,233,,,-545,-545,,,,,,239,240,,36,,,30',
',,52,53,,,54,,32,222,,228,40,224,223,220,221,232,230,226,18,227,,,,81',
'73,76,77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62',
'23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,225,-545,-545,-545,-545,231,233',
',,-545,-545,,,,,,239,240,,36,,,30,,,52,53,,,54,,32,222,,228,40,224,223',
'220,221,232,230,226,18,227,,,,81,73,76,77,,78,79,,,,74,80,5,63,64,65',
'7,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91',
'92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39',
'37,225,229,234,235,236,231,233,,,237,238,,,,,,239,240,,36,,,30,,,52',
'53,,,54,,32,222,,228,40,224,223,220,221,232,230,226,18,227,,,,81,73',
'76,77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62,23',
'24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84,50',
'86,85,87,,88,96,97,,82,83,38,39,37,225,229,234,235,236,231,233,241,',
'237,238,,,,,,239,240,,36,,,30,,,52,53,,,54,,32,222,,228,40,224,223,220',
'221,232,230,226,18,227,,,,81,73,76,77,,78,79,,,,74,80,5,63,64,65,7,51',
'56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,',
',17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37',
'225,,,,,,,,,,,,,,,,239,240,,36,,,30,,,52,53,,,54,,32,222,,228,40,224',
'223,220,221,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,5,63,64,65,7,51,56',
',75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17',
',,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,225',
',,,,,,,,,,,,,,,239,240,,36,,,30,,,52,53,,,54,,32,222,,,40,224,223,220',
'221,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75,57',
'58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6',
'41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,',
',,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,81,73,76,77,,78',
'79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67',
',,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87',
',88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32',
',,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,5,63,64,65,7,51,56,',
'75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17',
',,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,',
',,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,81,73,76',
'77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62,23,24',
'66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86',
'85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,',
',54,,32,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,5,63,64,65,7',
'51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92',
',,17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,81,73',
'76,77,,78,79,,,,74,80,5,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62,23',
'24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84,50',
'86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53',
',,54,,32,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,5,63,64,65',
'7,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91',
'92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39',
'37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,,,40,,,,,,,,18,,,,,81',
'73,76,77,,78,79,,,,74,80,,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62',
'23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52',
'53,,,54,,32,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65',
',51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91',
'92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,215,,,,,81',
'73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62',
'256,257,66,67,,,,,,255,28,27,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84',
'50,86,85,87,259,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216',
',,52,53,,,54,,254,,252,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,28',
'27,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87,259,88,96,97',
',82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,254,,252',
',40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75',
'57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,28,27,90,89,91,92,,,217',
',,,,,,41,,,94,93,95,84,50,86,85,87,259,88,96,97,,82,83,38,39,37,,,,',
',,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,254,,252,,40,,,,,,,,215,,,,,81',
'73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62',
'256,257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,287,,,94,93,95',
'84,50,86,85,87,,88,96,97,,82,83,,514,291,511,510,509,515,512,,,,,,,',
',,,,,,,284,,,281,,,52,53,,,54,,280,,,,517,,,,,,,,,521,520,524,523,81',
'73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62',
'256,257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,576,,287,,,94,93',
'95,84,50,86,85,87,,88,96,97,,82,83,,,291,225,229,234,235,236,231,233',
'241,242,237,238,,218,219,,,239,240,,284,,,216,,,52,53,,,54,,,222,,228',
',224,223,220,221,232,230,226,,227,,,,81,73,76,77,,78,79,,,,74,80,,243',
',293,,,56,,75,63,64,65,,51,,,,57,58,,,,61,,59,60,62,256,257,66,67,,',
',,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87',
',88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54',
',,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56',
',75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,286,290,90,89,91,92',
',,217,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,',
',,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256',
'257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,',
',52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64',
'65,,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89',
'91,92,,,17,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39',
'37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81',
'73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62',
'256,257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94,93,95',
'84,50,86,85,87,259,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,',
',216,,,52,53,,,54,,254,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74',
'80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255',
'286,290,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87,259,88',
'96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,',
',40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75',
'57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,',
',,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,',
',,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,73,76,77,,78',
'79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,',
',,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,95,84,50,86,85,87,,88',
'96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,',
',40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57',
'58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,',
'41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,225,229,234,235',
'236,231,233,241,242,237,238,,218,219,,,239,240,,210,,-226,216,,,52,53',
',,54,,,222,,228,40,224,223,220,221,232,230,226,18,227,,,,81,73,76,77',
',78,79,,,,74,80,102,243,,-226,,101,56,,75,63,64,65,,51,,,,57,58,,,,61',
',59,60,62,256,257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,287',
',,94,93,95,84,50,86,85,87,,88,96,97,,82,83,,514,291,511,510,509,515',
'512,,,,,,,,,,,,,,,326,,,30,,,52,53,,,54,,32,,,,517,,,,,,,,,521,520,524',
'523,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,256,257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,287,,,94',
'93,95,331,50,86,85,332,,88,96,97,,82,83,,514,291,511,510,509,515,512',
',,,,,,,,,,,338,,,333,,,216,,,52,53,,,54,,,,,,517,,,,,,,,,521,520,524',
'523,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,256,257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,287,,,94',
'93,95,331,50,86,85,332,,88,96,97,,82,83,,742,291,511,510,509,515,512',
',,,,,,,,,,,,,,333,,,216,,,52,53,,,54,,,,,,517,,,,,,,,,521,520,524,523',
'81,73,76,77,,78,79,,,,74,80,,63,64,65,7,51,56,,75,57,58,,,,61,,59,60',
'62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95',
'84,50,86,85,87,,88,96,97,,82,83,38,39,37,225,229,234,235,236,231,233',
'241,242,237,238,,218,219,,,239,240,,36,,,30,,,52,53,,,54,,32,222,,228',
'40,224,223,220,221,232,230,226,18,227,,,,81,73,76,77,,78,79,,,,74,80',
',243,,,,363,56,,75,63,64,65,,51,,,,57,58,,,,61,,59,60,62,23,24,66,67',
',,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,95,84,50,86,85,87,,88',
'96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,',
',40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57',
'58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,',
'41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,',
',,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79',
',,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,',
',22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96',
'97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40',
',,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58',
',,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41',
',,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,',
',,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,',
',,74,80,,63,64,65,7,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,',
',22,28,27,90,89,91,92,,,17,,,,,,6,41,8,9,94,93,95,84,50,86,85,87,,88',
'96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,53,,,54,,32,,',
',40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57',
'58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,217,,,,,',
',41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,',
',,,,,,,210,,,216,,,52,53,,,54,,380,,,,40,,,,,,,,215,,,,,81,73,76,77',
',78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,23,24,66',
'67,,,,,,22,28,27,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87',
',88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54',
',380,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51',
'56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,',
',217,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,',
',,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256',
'257,66,67,,,,,,255,28,27,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50',
'86,85,87,259,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,',
',52,53,,,54,,254,,252,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27',
'90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83',
'38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,215',
',,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,95',
'84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216',
',,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,,63,64',
'65,,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89',
'91,92,,,17,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39',
'37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81',
'73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62',
'23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,95,84,50',
'86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52',
'53,,,54,,,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65',
',51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91',
'92,,,17,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,73',
'76,77,,78,79,,,,74,80,206,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62',
'256,257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94,93,95',
'84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216',
',,52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63',
'64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,286,290',
'90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83',
'38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,215',
',,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,256,257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94',
'93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210',
',,216,,,52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,286',
'290,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,',
'82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,',
',,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,',
',,61,,59,60,62,256,257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,',
',,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,',
',,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73,76,77,,78',
'79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67',
',,,,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87',
',88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54',
',,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56',
',75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,286,290,90,89,91,92',
',,217,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,',
',,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256',
'257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,',
',52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64',
'65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,286,290,90',
'89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38',
'39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,215,',
',,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,256,257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94',
'93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210',
',,216,,,52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,286',
'290,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,',
'82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,',
',,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,',
',,61,,59,60,62,256,257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,',
',,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,',
',,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73,76,77,,78',
'79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67',
',,,,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87',
',88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54',
',,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56',
',75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,286,290,90,89,91,92',
',,217,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,',
',,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256',
'257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,',
',52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64',
'65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,286,290,90',
'89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38',
'39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,215,',
',,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,256,257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94',
'93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210',
',,216,,,52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,286',
'290,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,',
'82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,',
',,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,',
',,61,,59,60,62,256,257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,',
',,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,',
',,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73,76,77,,78',
'79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67',
',,,,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87',
',88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54',
',,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56',
',75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,286,290,90,89,91,92',
',,217,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,',
',,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256',
'257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,',
',52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64',
'65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,286,290,90',
'89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38',
'39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,215,',
',,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,256,257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94',
'93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210',
',,216,,,52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,286',
'290,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,',
'82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,',
',,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,',
',,61,,59,60,62,256,257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,',
',,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,',
',,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73,76,77,,78',
'79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67',
',,,,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87',
',88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54',
',,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56',
',75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,286,290,90,89,91,92',
',,217,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,',
',,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256',
'257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,',
',52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64',
'65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,286,290,90',
'89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38',
'39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,215,',
',,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,256,257,66,67,,,,,,255,28,27,90,89,91,92,,,217,,,,,,,41,,,94,93',
'95,84,50,86,85,87,259,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210',
',,216,,,52,53,,,54,,254,,252,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,',
',,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67,,,',
',,255,28,27,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87,259',
'88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,461,53,,,54',
',254,,252,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,',
'51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,28,27,90,89,91',
'92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87,259,88,96,97,,82,83,38,39',
'37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,254,,252,,40,,,,,,,,215',
',,,,81,73,76,77,,78,79,,,,74,80,206,63,64,65,,51,56,,75,57,58,,,,61',
',59,60,62,256,257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,287',
',,94,93,95,84,50,86,85,87,,88,96,97,,82,83,,,291,225,229,234,235,236',
'231,233,241,242,237,238,,218,219,,,239,240,,284,,,216,,,52,53,,,54,',
',222,,228,,224,223,220,221,232,230,226,,227,,,,81,73,76,77,,78,79,,',
',74,80,,243,,471,,,56,,75,63,64,65,,51,,,,57,58,,,,61,,59,60,62,256',
'257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,287,,,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,,742,291,511,510,509,515,512,,,,,,,,,,',
',,,,284,,,281,,,52,53,,,54,,,,,,517,,,,,,,,,521,520,524,523,81,73,76',
'77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257',
'66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86',
'85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,489,,52',
'53,,,54,,,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65',
',51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91',
'92,,,17,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,23',
'24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,95,84,50,86',
'85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53',
',,54,,,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51',
'56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,',
',17,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,',
',,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,73,76',
'77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,23,24',
'66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,95,84,50,86,85',
'87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,',
'54,,,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56',
',75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,286,290,90,89,91,92',
',,217,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,',
',,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256',
'257,66,67,,,,,,255,28,27,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50',
'86,85,87,259,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,',
',52,53,,,54,,254,,252,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,286',
'290,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,',
'82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,',
',,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,',
',,61,,59,60,62,256,257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,',
',,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,',
',,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73,76,77,,78',
'79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67',
',,,,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87',
',88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54',
',,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56',
',75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,286,290,90,89,91,92',
',,217,,,,,,,41,,,94,93,95,84,50,86,85,87,259,88,96,97,,82,83,38,39,37',
',,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,607,,252,,40,,,,,,,,215,',
',,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,256,257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94',
'93,95,84,50,86,85,87,259,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,',
',210,,,216,,,52,53,,,54,,,,252,,40,,,,,,,,215,,,,,81,73,76,77,,78,79',
',,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67,,',
',,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87',
',88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54',
',,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56',
',75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17',
',,,,,,41,,,94,93,95,84,50,86,85,87,259,88,96,97,,82,83,38,39,37,,,,',
',,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,252,,40,,,,,,,,18,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256',
'257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,287,,,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,,514,291,511,510,509,515,512,,,,,,,,,,',
',,,,284,,,281,,,52,53,,,54,,,,,,517,,,,,,,,,521,520,524,523,81,73,76',
'77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257',
'66,67,,,,,,255,28,27,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86',
'85,87,259,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52',
'53,,,54,,254,,252,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63',
'64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,286,290',
'90,89,91,92,,,217,,,,,,,287,,,94,93,95,84,50,86,85,87,,88,96,97,,82',
'83,,514,291,511,510,509,515,512,,,,,,,,,,,,,,,284,,,281,,,52,53,,,54',
',,,,,517,701,,,,,,,,521,520,524,523,81,73,76,77,,78,79,,,,74,80,,63',
'64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,286,290',
'90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83',
'38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,215',
',,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,256,257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94',
'93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210',
',,216,,,52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,286',
'290,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,',
'82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,',
',,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,',
',,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,',
',94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,',
',,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,',
',74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67,,,,',
',255,286,290,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87,,88',
'96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,380',
',,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75',
'57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,286,290,90,89,91,92,,,217',
',,,,,,41,,,94,93,95,84,50,86,85,87,259,88,96,97,,82,83,38,39,37,,,,',
',,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,607,,,,40,,,,,,,,215,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256',
'257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84',
'50,86,85,87,259,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216',
',,52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63',
'64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,286,290',
'90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83',
'38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,254,,,,40,,,,,,',
',215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61',
',59,60,62,256,257,66,67,,,,,,255,28,27,90,89,91,92,,,217,,,,,,,41,,',
'94,93,95,84,50,86,85,87,259,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,',
',,,,210,,,216,,,52,53,,,54,,254,,252,,40,,,,,,,,215,,,,,81,73,76,77',
',78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66',
'67,,,,,,255,28,27,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85',
'87,259,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53',
',,54,,254,,252,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64',
'65,,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89',
'91,92,,,17,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39',
'37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81',
'73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62',
'256,257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94,93,95',
'84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216',
',,52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63',
'64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,286,290',
'90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83',
'38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,718,,,,40,,,,,,',
',215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61',
',59,60,62,256,257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,41',
',,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,',
',,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79',
',,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,',
',22,28,27,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96',
'97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40',
',,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58',
',,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,217,,,,,,,41',
',,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,',
',,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79',
',,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,',
',22,28,27,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96',
'97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40',
',,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58',
',,,61,,59,60,62,256,257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,',
',,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,',
',,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73,76,77,',
'78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66',
'67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85',
'87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,',
'54,,,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51',
'56,,75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,286,290,90,89,91',
'92,,,217,,,,,,,287,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,,742,291',
'511,510,509,515,512,,,,,,,,,,,,,,,284,,,281,,,52,53,,,54,,,,,,517,,',
',,,,,,521,520,524,523,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,',
'75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,286,290,90,89,91,92',
',,217,,,,,,,287,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,,,291,,,',
',,,,,,,,,,,,,,,,284,,,281,,,52,53,,,54,,,,,,,,,,,,,,,,,,,81,73,76,77',
',78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66',
'67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85',
'87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,',
'54,,,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51',
'56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,',
',17,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,',
',,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,73,76',
'77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257',
'66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86',
'85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53',
',,54,,,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51',
'56,,75,57,58,,,,61,,59,60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,',
',217,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,',
',,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256',
'257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84',
'50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,',
',52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64',
'65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,286,290,90',
'89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38',
'39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,,,,,,215,',
',,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,256,257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94',
'93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210',
',,216,,,52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,286',
'290,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,',
'82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,,,,,40,,,',
',,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,',
',,61,,59,60,62,256,257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,',
',,41,,,94,93,95,84,50,86,85,87,259,88,96,97,,82,83,38,39,37,,,,,,,,',
',,,,,,,,,,,210,,,216,,,52,53,,,54,,254,,252,,40,,,,,,,,215,,,,,81,73',
'76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256',
'257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84',
'50,86,85,87,259,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216',
',,52,53,,,54,,254,,252,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,286',
'290,90,89,91,92,,,217,,,,,,,287,,,94,93,95,84,50,86,85,87,,88,96,97',
',82,83,,,291,,,,,,,,,,,,,,,,,,,,837,,,216,,,52,53,,,54,,,,,,,,,,,,,',
',,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,23,24,66,67,,,,,,22,28,27,90,89,91,92,,,17,,,,,,,41,,,94,93,95',
'84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216',
',,52,53,,,54,,,,,,40,,,,,,,,18,,,,,81,73,76,77,,78,79,,,,74,80,,63,64',
'65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,286,290,90',
'89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87,,88,96,97,,82,83,38',
'39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,,607,,,,40,,,,,,,,215',
',,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,256,257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94',
'93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210',
',,216,,,52,53,,,54,,,,,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80',
',63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,286',
'290,90,89,91,92,,,217,,,,,,,287,,,94,93,95,84,50,86,85,87,,88,96,97',
',82,83,,,291,,,,,,,,,,,,,,,,,,,,880,,,216,,,52,53,,,54,,,,,,,,,,,,,',
',,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59',
'60,62,256,257,66,67,,,,,,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94',
'93,95,84,50,86,85,87,,88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210',
',,216,,,52,53,,,54,,607,,252,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,',
',,74,80,,63,64,65,,51,56,,75,57,58,,,,61,,59,60,62,256,257,66,67,,,',
',,255,286,290,90,89,91,92,,,217,,,,,,,41,,,94,93,95,84,50,86,85,87,259',
'88,96,97,,82,83,38,39,37,,,,,,,,,,,,,,,,,,,,210,,,216,,,52,53,,,54,',
'607,,252,,40,,,,,,,,215,,,,,81,73,76,77,,78,79,,,,74,80,,63,64,65,,51',
'56,,75,57,58,,,,61,,59,60,62,256,257,66,67,,,,,,255,28,27,90,89,91,92',
',,217,,,,,,,41,,,94,93,95,84,50,86,85,87,259,88,96,97,,82,83,38,39,37',
'225,229,234,235,236,231,233,241,242,237,238,,218,219,,,239,240,,210',
',,216,,,52,53,,,54,,254,222,252,228,40,224,223,220,221,232,230,226,215',
'227,,,,81,73,76,77,,78,79,,,,74,80,,243,-391,,,,56,,75,-391,-391,-391',
',,-391,-391,-391,,-391,,,,,,,,,-391,-391,-391,,,,,,,,,-391,-391,,-391',
'-391,-391,-391,-391,,,,,,,,,,,,,,,,,,,,,,,-391,-391,-391,-391,-391,-391',
'-391,-391,-391,-391,-391,-391,-391,-391,,,-391,-391,-391,,,-391,,265',
'-391,,,-391,-391,,-391,,-391,,-391,,-391,-391,-391,-391,-391,-391,-391',
'-286,-391,-391,-391,,,,-286,-286,-286,,,-286,-286,-286,,-286,-391,-391',
',-391,,-391,,,,-286,-286,,,,,,,,,-286,-286,,-286,-286,-286,-286,-286',
',,,,,,,,,,,,,,,,,,,,,,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286',
'-286,-286,-286,-286,,,-286,-286,-286,,,-286,,274,-286,,,-286,-286,,-286',
',-286,,-286,,-286,-286,-286,-286,-286,-286,-286,-232,-286,,-286,,,,-232',
'-232,-232,,,-232,-232,-232,,-232,-286,-286,,-286,,-286,,,-232,-232,-232',
',,,,,,,,-232,-232,,-232,-232,-232,-232,-232,,,,,,,,,,,,,,,,,,,,,,,-232',
'-232,-232,-232,-232,-232,-232,-232,-232,-232,-232,-232,-232,-232,,,-232',
'-232,-232,,,-232,,265,-232,,,-232,-232,,-232,,-232,,-232,,-232,-232',
'-232,-232,-232,-232,-232,-232,-232,-232,-232,,,,-232,-232,-232,,,-232',
'-232,-232,,-232,-232,-232,,-232,,-232,,,,-232,,,,,,,,,,-232,-232,,-232',
'-232,-232,-232,-232,,,,,,,,,,,,-232,,,,,,,-232,-232,-232,,,-232,-232',
'-232,,-232,,,,,,-232,,,,-232,,,-232,,,,,265,-232,-232,-232,,-232,-232',
'-232,-232,-232,,,,,,389,393,,,390,,,,-232,,,,145,146,,142,124,125,126',
'133,130,132,-232,,127,128,,-232,-232,147,148,134,135,,,-232,,,265,,265',
'-232,,,,,139,138,,123,144,141,140,136,137,131,129,121,143,122,,,149',
'-232,,,,,,,,,,,,,,-232,,,,,-232,160,171,161,184,157,177,167,166,187',
'188,182,165,164,159,185,189,190,169,158,172,176,178,170,163,,,,179,186',
'181,180,173,183,168,156,175,174,,,,,,155,162,153,154,150,151,152,112',
'114,111,,113,,,,,,,,145,146,,142,124,125,126,133,130,132,,,127,128,',
',,147,148,134,135,,,,,,,,,,,,,,139,138,,123,144,141,140,136,137,131',
'129,121,143,122,,,149,81,,,,,,,,,,,80,160,171,161,184,157,177,167,166',
'187,188,182,165,164,159,185,189,190,169,158,172,176,178,170,163,,,,179',
'186,181,180,173,183,168,156,175,174,,,,,,155,162,153,154,150,151,152',
'112,114,,,113,,,,,,,,145,146,,142,124,125,126,133,130,132,,,127,128',
',,,147,148,134,135,,,,,,,,,,,,,,139,138,,123,144,141,140,136,137,131',
'129,121,143,122,,,149,81,,,,,,,,,,,80,160,171,161,184,157,177,167,166',
'187,188,182,165,164,159,185,189,190,169,158,172,176,178,170,163,,,,179',
'186,181,180,173,183,168,156,175,174,,,,,,155,162,153,154,150,151,152',
'112,114,,,113,,,,,,,,145,146,,142,124,125,126,133,130,132,,,127,128',
',,,147,148,134,135,,,,,,,,,,,,,,139,138,,123,144,141,140,136,137,131',
'129,121,143,122,,,149,81,,,,,,,,,,,80,160,171,161,184,157,177,167,166',
'187,188,182,165,164,159,185,189,190,169,158,172,176,178,170,163,,,,179',
'186,181,180,173,183,168,156,175,174,,,,,,155,162,153,154,150,151,152',
'112,114,,,113,,,,,,,,145,146,,142,124,125,126,133,130,132,,,127,128',
',,,147,148,134,135,,,,,,,,,,,,,,139,138,,123,144,141,140,136,137,131',
'129,121,143,122,,,149,81,,,,,,,,,,,80,160,171,161,184,157,177,167,166',
'187,188,182,165,164,159,185,189,190,169,158,172,176,178,170,163,,,,179',
'186,181,348,347,349,346,156,175,174,,,,,,155,162,153,154,343,344,345',
'341,114,86,85,342,,88,,,,,,145,146,,142,124,125,126,133,130,132,,,127',
'128,,,,147,148,134,135,,,,,,353,,,,,,,,139,138,,123,144,141,140,136',
'137,131,129,121,143,122,,,149,160,171,161,184,157,177,167,166,187,188',
'182,165,164,159,185,189,190,169,158,172,176,178,170,163,,,,179,186,181',
'180,173,183,168,156,175,174,,,,,,155,162,153,154,150,151,152,112,114',
',,113,,,,,,,,145,146,,142,124,125,126,133,130,132,,,127,128,,,,147,148',
'134,135,,,,,,,,,,,,,,139,138,,123,144,141,140,136,137,131,129,121,143',
'122,395,400,149,,397,,,,,,,,145,146,,142,124,125,126,133,130,132,,,127',
'128,,,,147,148,134,135,,,,,,265,,,,,,,,139,138,,123,144,141,140,136',
'137,131,129,121,143,122,453,393,149,,454,,,,,,,,145,146,,142,124,125',
'126,133,130,132,,,127,128,,,,147,148,134,135,,,,,,,,,,,,,,139,138,,123',
'144,141,140,136,137,131,129,121,143,122,453,393,149,,454,,,,,,,,145',
'146,,142,124,125,126,133,130,132,,,127,128,,,,147,148,134,135,,,,,,',
',,,,,,,139,138,,123,144,141,140,136,137,131,129,121,143,122,593,393',
'149,,594,,,,,,,,145,146,,142,124,125,126,133,130,132,,,127,128,,,,147',
'148,134,135,,,,,,265,,,,,,,,139,138,,123,144,141,140,136,137,131,129',
'121,143,122,595,400,149,,596,,,,,,,,145,146,,142,124,125,126,133,130',
'132,,,127,128,,,,147,148,134,135,,,,,,265,,,,,,,,139,138,,123,144,141',
'140,136,137,131,129,121,143,122,630,393,149,,631,,,,,,,,145,146,,142',
'124,125,126,133,130,132,,,127,128,,,,147,148,134,135,,,,,,265,,,,,,',
',139,138,,123,144,141,140,136,137,131,129,121,143,122,633,400,149,,634',
',,,,,,,145,146,,142,124,125,126,133,130,132,,,127,128,,,,147,148,134',
'135,,,,,,265,,,,,,,,139,138,,123,144,141,140,136,137,131,129,121,143',
'122,593,393,149,,594,,,,,,,,145,146,,142,124,125,126,133,130,132,,,127',
'128,,,,147,148,134,135,,,,,,265,,,,,,,,139,138,,123,144,141,140,136',
'137,131,129,121,143,122,595,400,149,,596,,,,,,,,145,146,,142,124,125',
'126,133,130,132,,,127,128,,,,147,148,134,135,,,,,,265,,,,,,,,139,138',
',123,144,141,140,136,137,131,129,121,143,122,686,393,149,,687,,,,,,',
',145,146,,142,124,125,126,133,130,132,,,127,128,,,,147,148,134,135,',
',,,,265,,,,,,,,139,138,,123,144,141,140,136,137,131,129,121,143,122',
'688,400,149,,689,,,,,,,,145,146,,142,124,125,126,133,130,132,,,127,128',
',,,147,148,134,135,,,,,,265,,,,,,,,139,138,,123,144,141,140,136,137',
'131,129,121,143,122,691,400,149,,692,,,,,,,,145,146,,142,124,125,126',
'133,130,132,,,127,128,,,,147,148,134,135,,,,,,265,,,,,,,,139,138,,123',
'144,141,140,136,137,131,129,121,143,122,453,393,149,,454,,,,,,,,145',
'146,,142,124,125,126,133,130,132,,,127,128,,,,147,148,134,135,,,,,,265',
',,,,,,,139,138,,123,144,141,140,136,137,131,129,121,143,122,923,393',
'149,,924,,,,,,,,145,146,,142,124,125,126,133,130,132,,,127,128,,,,147',
'148,134,135,,,,,,265,,,,,,,,139,138,,123,144,141,140,136,137,131,129',
'121,143,122,925,400,149,,926,,,,,,,,145,146,,142,124,125,126,133,130',
'132,,,127,128,,,,147,148,134,135,,,,,,265,,,,,,,,139,138,,123,144,141',
'140,136,137,131,129,121,143,122,942,400,149,,941,,,,,,,,145,146,,142',
'124,125,126,133,130,132,,,127,128,,,,147,148,134,135,,,,,,265,,,,,,',
',139,138,,123,144,141,140,136,137,131,129,121,143,122,,,149,225,229',
'234,235,236,231,233,241,242,237,238,,218,219,,,239,240,,,,,,,,,,,,,',
',222,,228,,224,223,220,221,232,230,226,,227,,225,229,234,235,236,231',
'233,241,242,237,238,,218,219,206,243,239,240,,,,,,,,,,,,,,,222,,228',
',224,223,220,221,232,230,226,,227,,225,229,234,235,236,231,233,241,242',
'237,238,,218,219,,243,239,240,,,,,,,,,,,,,,,222,,228,,224,223,220,221',
'232,230,226,,227,,225,229,234,235,236,231,233,241,242,237,238,,218,219',
',243,239,240,,,,,,,,,,,,,,,222,,228,,224,223,220,221,232,230,226,,227',
',225,229,234,235,236,231,233,241,242,237,238,,218,219,,243,239,240,',
',,,,,,,,,,,,,222,,228,,224,223,220,221,232,230,226,,227,,225,229,234',
'235,236,231,233,241,242,237,238,,218,219,,243,239,240,,,,,,,,,,,,,,',
'222,,228,,224,223,220,221,232,230,226,,227,,225,229,234,235,236,231',
'233,241,242,237,238,,218,219,,243,239,240,,,,,,,,,,,,,,,222,,228,,224',
'223,220,221,232,230,226,,227,,225,229,234,235,236,231,233,241,242,237',
'238,,218,219,,243,239,240,,,,,,,,,,,,,,,222,,228,,224,223,220,221,232',
'230,226,,227,,225,229,234,235,236,231,233,241,242,237,238,,218,219,',
'243,239,240,,,,,,,,,,,,,,,222,,228,,224,223,220,221,232,230,226,,227',
',225,229,234,235,236,231,233,241,242,237,238,,218,219,,243,239,240,',
',,,,,,,,,,,,,222,,228,,224,223,220,221,232,230,226,,227,,225,229,234',
'235,236,231,233,241,242,237,238,,218,219,,243,239,240,,,,,,,,,,,,,,',
'222,,228,,224,223,220,221,232,230,226,,227,,,,,,,,,,,,,,,,,243' ]
        racc_action_table = arr = ::Array.new(23120, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'84,0,0,0,0,0,0,84,84,84,0,0,84,84,84,0,84,0,0,0,0,0,0,0,84,55,84,84',
'84,0,0,0,0,0,0,0,84,84,0,84,84,84,84,84,0,0,0,0,0,0,0,0,0,0,0,0,337',
'0,0,0,317,0,0,0,0,0,84,84,84,84,84,84,84,84,84,84,84,84,84,84,1,617',
'84,84,84,0,84,84,0,324,84,0,0,84,84,0,84,0,84,359,84,0,84,84,84,84,84',
'84,84,0,84,55,84,327,0,0,0,0,17,0,0,8,502,617,0,0,84,84,84,84,87,84',
'0,84,0,84,538,87,87,87,209,14,87,87,87,530,87,333,318,630,9,333,684',
'443,87,17,87,87,87,407,407,337,359,514,10,686,87,87,531,87,87,87,87',
'87,317,763,859,923,924,317,687,337,550,550,14,944,337,443,3,209,14,462',
'11,3,324,798,87,87,87,87,87,87,87,87,87,87,87,87,87,87,463,514,87,87',
'87,630,87,87,327,12,87,925,631,87,87,462,87,502,87,20,87,799,87,87,87',
'87,87,87,87,395,87,538,87,34,463,530,395,395,395,407,530,630,395,395',
'630,395,87,87,87,87,630,87,318,87,395,87,684,318,531,684,686,684,550',
'531,26,395,395,550,395,395,395,395,395,556,556,687,36,688,631,763,859',
'923,924,689,763,859,923,924,925,944,798,864,41,864,944,395,395,395,395',
'395,395,395,395,395,395,395,395,395,395,641,641,395,395,395,631,395',
'35,631,211,395,413,799,395,631,567,925,799,395,26,395,925,395,395,395',
'395,395,395,395,397,395,395,395,688,742,295,397,397,397,689,593,26,397',
'397,389,397,395,395,71,395,35,395,288,625,556,395,35,71,211,625,413',
'307,331,98,307,397,397,71,397,397,397,397,397,688,25,614,567,567,295',
'689,191,25,742,355,295,567,210,389,212,593,641,756,213,389,217,397,397',
'397,397,397,397,397,397,397,397,397,397,397,397,614,356,397,397,397',
'331,397,288,308,249,397,308,331,397,357,332,594,331,397,250,397,331',
'397,397,397,397,397,397,397,288,397,734,397,321,756,355,355,355,321',
'331,633,756,253,549,358,595,397,397,549,397,756,397,595,595,595,397',
'264,595,595,595,390,595,356,356,356,594,311,332,756,311,595,595,595',
'595,332,357,357,357,691,332,734,595,595,332,595,595,595,595,595,15,15',
'670,633,670,670,670,670,670,360,633,275,332,277,390,633,358,358,358',
'633,390,278,595,595,595,595,595,595,595,595,595,595,595,595,595,595',
'279,633,595,595,595,691,595,595,341,284,595,580,691,595,595,341,595',
'691,595,286,595,691,595,595,595,595,595,595,595,287,595,595,595,342',
'360,360,360,696,650,691,342,650,696,438,670,13,595,595,595,595,596,595',
'13,595,580,595,290,596,596,596,580,13,596,596,596,601,596,601,601,601',
'601,601,37,37,292,438,596,596,596,438,438,438,438,291,291,296,596,596',
'343,596,596,596,596,596,855,343,855,855,855,855,855,517,601,517,517',
'517,517,517,344,305,305,601,601,601,601,344,596,596,596,596,596,596',
'596,596,596,596,596,596,596,596,316,316,596,596,596,42,596,596,517,297',
'596,300,42,596,596,601,596,517,596,303,596,42,596,596,596,596,596,596',
'596,304,596,419,596,309,503,310,503,503,503,503,503,312,855,345,322',
'346,596,596,596,596,345,596,346,596,323,596,30,30,30,30,30,30,347,419',
'326,30,30,419,419,347,30,503,30,30,30,30,30,30,30,328,503,503,503,503',
'30,30,30,30,30,30,30,111,374,30,675,675,111,111,378,30,30,30,30,30,30',
'30,30,30,30,30,30,375,30,30,30,381,30,30,30,30,30,378,378,378,378,378',
'378,378,378,378,378,378,208,378,378,282,383,378,378,208,30,420,282,30',
'702,387,30,30,208,702,30,282,30,378,396,378,30,378,378,378,378,378,378',
'378,30,378,934,934,409,30,30,30,30,420,30,30,439,420,420,30,30,348,378',
'50,378,421,349,30,348,30,50,50,50,349,422,50,50,50,315,50,315,315,315',
'315,315,423,424,458,439,50,50,50,439,439,439,439,464,466,467,50,50,351',
'50,50,50,50,50,787,351,787,787,787,787,787,470,315,315,856,472,856,856',
'856,856,856,315,315,315,315,477,50,50,50,50,50,50,50,50,50,50,50,50',
'50,50,481,787,50,50,50,283,490,50,493,504,50,856,283,50,50,505,50,506',
'50,507,50,283,50,50,50,50,50,50,50,285,50,515,50,522,298,525,285,527',
'560,560,532,298,560,560,560,285,50,50,50,50,298,50,533,50,51,51,51,51',
'51,51,564,570,325,51,51,577,581,584,51,325,51,51,51,51,51,51,51,588',
'325,597,599,604,51,51,51,51,51,51,51,606,667,51,667,667,667,667,667',
'51,51,51,51,51,51,51,51,51,51,51,51,618,51,51,51,620,51,51,51,51,51',
'785,627,785,785,785,785,785,662,667,662,662,662,662,662,335,629,476',
'667,632,51,635,335,51,476,636,51,51,639,640,51,335,51,476,642,645,51',
'820,785,820,820,820,820,820,51,662,646,785,654,51,51,51,51,663,51,51',
'662,662,669,51,51,193,193,193,193,193,193,51,671,51,193,193,672,677',
'820,193,682,193,193,193,193,193,193,193,685,820,820,694,699,193,193',
'193,193,193,193,193,717,898,193,898,898,898,898,898,193,193,193,193',
'193,193,193,193,193,193,193,193,736,193,193,193,737,193,193,193,193',
'193,900,738,900,900,900,900,900,847,898,847,847,847,847,847,541,740',
'634,835,741,193,744,541,193,634,835,193,193,752,634,193,541,193,634',
'835,753,193,849,900,849,849,849,849,849,193,847,754,755,767,193,193',
'193,193,768,193,193,847,847,769,193,193,194,194,194,194,194,194,193',
'770,193,194,194,774,775,849,194,778,194,194,194,194,194,194,194,779',
'849,849,781,784,194,194,194,194,194,194,194,786,932,194,932,932,932',
'932,932,194,194,194,194,194,194,194,194,194,194,194,194,789,194,194',
'194,792,194,194,194,194,194,655,801,655,655,655,805,655,851,932,851',
'851,851,851,851,836,806,692,838,809,194,810,836,194,692,838,194,194',
'822,692,194,836,194,692,838,825,194,913,826,913,913,913,913,913,194',
'851,827,829,837,194,194,194,194,857,194,194,851,851,861,194,194,216',
'216,216,216,216,216,194,862,194,216,216,867,872,913,216,873,216,216',
'216,216,216,216,216,874,913,913,875,877,216,216,216,216,216,216,216',
'880,843,216,843,843,843,887,843,216,216,216,216,216,216,216,216,216',
'216,216,216,893,216,216,216,894,216,216,216,216,216,895,879,4,4,4,4',
'4,915,879,915,915,915,915,915,891,896,926,879,897,216,899,891,216,926',
'920,216,216,922,926,216,891,216,926,933,935,216,928,936,928,928,928',
'928,928,216,915,937,938,939,216,216,216,216,940,216,216,915,915,941',
'216,216,276,276,276,276,276,276,216,942,216,276,276,945,946,928,276',
'956,276,276,276,276,276,276,276,,928,928,,,276,276,276,276,276,276,276',
',,276,109,109,109,109,109,276,276,276,276,276,276,276,276,276,276,276',
'276,,276,276,276,,276,276,276,276,276,425,362,362,362,362,362,,951,',
'951,951,951,951,951,,,425,425,,276,,,276,,,276,276,,,276,,276,425,,425',
'276,425,425,425,425,,,,276,951,,,,276,276,276,276,,276,276,951,951,',
'276,276,281,281,281,281,281,281,276,,276,281,281,,,,281,,281,281,281',
'281,281,281,281,,,,,,281,281,281,281,281,281,281,,,281,,,,,386,281,281',
'281,281,281,281,281,281,281,281,281,281,,281,281,281,,281,281,281,281',
'281,386,386,386,386,386,386,386,386,386,386,386,,386,386,,,386,386,',
'281,,,281,,,281,281,,,281,,281,386,,386,281,386,386,386,386,386,386',
'386,281,386,,,,281,281,281,281,,281,281,,,,281,281,,386,400,,,,281,',
'281,400,400,400,,,400,400,400,552,400,552,552,552,552,552,,,,400,400',
'400,400,,,,,,,,400,400,,400,400,400,400,400,,,,,,,,,552,552,,,,,,,,552',
'552,552,552,,400,400,400,400,400,400,400,400,400,400,400,400,400,400',
',,400,400,400,,,400,,,400,,,400,400,,400,,400,,400,,400,400,400,400',
'400,400,400,401,400,400,400,,,,401,401,401,,,401,401,401,429,401,400',
'400,400,400,,400,,400,401,401,401,401,,,429,429,,,,401,401,,401,401',
'401,401,401,,,,429,,429,,429,429,429,429,,,429,,429,,,,,,,401,401,401',
'401,401,401,401,401,401,401,401,401,401,401,,,401,401,401,,,401,,,401',
',,401,401,,401,,401,,401,,401,401,401,401,401,401,401,,401,401,401,',
',,,,,,,,,,,,401,401,401,401,,401,,401,526,526,526,526,526,526,,,,526',
'526,,,,526,,526,526,526,526,526,526,526,,,,,,526,526,526,526,526,526',
'526,,,526,,,,,,526,526,526,526,526,526,526,526,526,526,526,526,,526',
'526,526,,526,526,526,526,526,417,417,417,417,417,417,417,417,417,417',
'417,,417,417,,,417,417,,526,,,526,,,526,526,,,526,,526,417,,417,526',
'417,417,417,417,417,417,417,526,417,,,,526,526,526,526,,526,526,,,,526',
'526,529,529,529,529,529,529,526,,526,529,529,,,,529,,529,529,529,529',
'529,529,529,,,,,,529,529,529,529,529,529,529,,,529,,,,,,529,529,529',
'529,529,529,529,529,529,529,529,529,,529,529,529,,529,529,529,529,529',
'418,418,418,418,418,418,418,418,418,418,418,,418,418,,,418,418,,529',
',,529,,,529,529,,,529,,529,418,,418,529,418,418,418,418,418,418,418',
'529,418,,,,529,529,529,529,,529,529,,,,529,529,551,551,551,551,551,551',
'529,,529,551,551,,,,551,,551,551,551,551,551,551,551,,,,,,551,551,551',
'551,551,551,551,,,551,,,,,,551,551,551,551,551,551,551,551,551,551,551',
'551,,551,551,551,,551,551,551,551,551,428,428,428,428,428,428,428,,',
'428,428,,,,,,428,428,,551,,,551,,,551,551,,,551,,551,428,,428,551,428',
'428,428,428,428,428,428,551,428,,,,551,551,551,551,,551,551,,,,551,551',
'603,603,603,603,603,603,551,,551,603,603,,,,603,,603,603,603,603,603',
'603,603,,,,,,603,603,603,603,603,603,603,,,603,,,,,,603,603,603,603',
'603,603,603,603,603,603,603,603,,603,603,603,,603,603,603,603,603,430',
',,,,,,,,,,,,,,,430,430,,603,,,603,,,603,603,,,603,,603,430,,430,603',
'430,430,430,430,,,430,603,430,,,,603,603,603,603,,603,603,,,,603,603',
'622,622,622,622,622,622,603,,603,622,622,,,,622,,622,622,622,622,622',
'622,622,,,,,,622,622,622,622,622,622,622,,,622,,,,,,622,622,622,622',
'622,622,622,622,622,622,622,622,,622,622,622,,622,622,622,622,622,431',
',,,,,,,,,,,,,,,431,431,,622,,,622,,,622,622,,,622,,622,431,,431,622',
'431,431,431,431,,,431,622,431,,,,622,622,622,622,,622,622,,,,622,622',
'623,623,623,623,623,623,622,,622,623,623,,,,623,,623,623,623,623,623',
'623,623,,,,,,623,623,623,623,623,623,623,,,623,,,,,,623,623,623,623',
'623,623,623,623,623,623,623,623,,623,623,623,,623,623,623,623,623,432',
',,,,,,,,,,,,,,,432,432,,623,,,623,,,623,623,,,623,,623,432,,432,623',
'432,432,432,432,,,432,623,432,,,,623,623,623,623,,623,623,,,,623,623',
'644,644,644,644,644,644,623,,623,644,644,,,,644,,644,644,644,644,644',
'644,644,,,,,,644,644,644,644,644,644,644,,,644,,,,,,644,644,644,644',
'644,644,644,644,644,644,644,644,,644,644,644,,644,644,644,644,644,433',
'433,433,433,433,433,433,,,433,433,,,,,,433,433,,644,,,644,,,644,644',
',,644,,644,433,,433,644,433,433,433,433,433,433,433,644,433,,,,644,644',
'644,644,,644,644,,,,644,644,652,652,652,652,652,652,644,,644,652,652',
',,,652,,652,652,652,652,652,652,652,,,,,,652,652,652,652,652,652,652',
',,652,,,,,,652,652,652,652,652,652,652,652,652,652,652,652,,652,652',
'652,,652,652,652,652,652,434,434,434,434,434,434,434,,,434,434,,,,,',
'434,434,,652,,,652,,,652,652,,,652,,652,434,,434,652,434,434,434,434',
'434,434,434,652,434,,,,652,652,652,652,,652,652,,,,652,652,653,653,653',
'653,653,653,652,,652,653,653,,,,653,,653,653,653,653,653,653,653,,,',
',,653,653,653,653,653,653,653,,,653,,,,,,653,653,653,653,653,653,653',
'653,653,653,653,653,,653,653,653,,653,653,653,653,653,435,435,435,435',
'435,435,435,,,435,435,,,,,,435,435,,653,,,653,,,653,653,,,653,,653,435',
',435,653,435,435,435,435,435,435,435,653,435,,,,653,653,653,653,,653',
'653,,,,653,653,695,695,695,695,695,695,653,,653,695,695,,,,695,,695',
'695,695,695,695,695,695,,,,,,695,695,695,695,695,695,695,,,695,,,,,',
'695,695,695,695,695,695,695,695,695,695,695,695,,695,695,695,,695,695',
'695,695,695,436,436,436,436,436,436,436,,,436,436,,,,,,436,436,,695',
',,695,,,695,695,,,695,,695,436,,436,695,436,436,436,436,436,436,436',
'695,436,,,,695,695,695,695,,695,695,,,,695,695,700,700,700,700,700,700',
'695,,695,700,700,,,,700,,700,700,700,700,700,700,700,,,,,,700,700,700',
'700,700,700,700,,,700,,,,,,700,700,700,700,700,700,700,700,700,700,700',
'700,,700,700,700,,700,700,700,700,700,437,437,437,437,437,437,437,,',
'437,437,,,,,,437,437,,700,,,700,,,700,700,,,700,,700,437,,437,700,437',
'437,437,437,437,437,437,700,437,,,,700,700,700,700,,700,700,,,,700,700',
'710,710,710,710,710,710,700,,700,710,710,,,,710,,710,710,710,710,710',
'710,710,,,,,,710,710,710,710,710,710,710,,,710,,,,,,710,710,710,710',
'710,710,710,710,710,710,710,710,,710,710,710,,710,710,710,710,710,440',
'440,440,440,440,440,440,,,440,440,,,,,,440,440,,710,,,710,,,710,710',
',,710,,710,440,,440,710,440,440,440,440,440,440,440,710,440,,,,710,710',
'710,710,,710,710,,,,710,710,748,748,748,748,748,748,710,,710,748,748',
',,,748,,748,748,748,748,748,748,748,,,,,,748,748,748,748,748,748,748',
',,748,,,,,,748,748,748,748,748,748,748,748,748,748,748,748,,748,748',
'748,,748,748,748,748,748,441,441,441,441,441,441,441,441,,441,441,,',
',,,441,441,,748,,,748,,,748,748,,,748,,748,441,,441,748,441,441,441',
'441,441,441,441,748,441,,,,748,748,748,748,,748,748,,,,748,748,760,760',
'760,760,760,760,748,,748,760,760,,,,760,,760,760,760,760,760,760,760',
',,,,,760,760,760,760,760,760,760,,,760,,,,,,760,760,760,760,760,760',
'760,760,760,760,760,760,,760,760,760,,760,760,760,760,760,426,,,,,,',
',,,,,,,,,426,426,,760,,,760,,,760,760,,,760,,760,426,,426,760,426,426',
'426,426,,,,760,,,,,760,760,760,760,,760,760,,,,760,760,793,793,793,793',
'793,793,760,,760,793,793,,,,793,,793,793,793,793,793,793,793,,,,,,793',
'793,793,793,793,793,793,,,793,,,,,,793,793,793,793,793,793,793,793,793',
'793,793,793,,793,793,793,,793,793,793,793,793,427,,,,,,,,,,,,,,,,427',
'427,,793,,,793,,,793,793,,,793,,793,427,,,793,427,427,427,427,,,,793',
',,,,793,793,793,793,,793,793,,,,793,793,794,794,794,794,794,794,793',
',793,794,794,,,,794,,794,794,794,794,794,794,794,,,,,,794,794,794,794',
'794,794,794,,,794,,,,,,794,794,794,794,794,794,794,794,794,794,794,794',
',794,794,794,,794,794,794,794,794,,,,,,,,,,,,,,,,,,,,794,,,794,,,794',
'794,,,794,,794,,,,794,,,,,,,,794,,,,,794,794,794,794,,794,794,,,,794',
'794,797,797,797,797,797,797,794,,794,797,797,,,,797,,797,797,797,797',
'797,797,797,,,,,,797,797,797,797,797,797,797,,,797,,,,,,797,797,797',
'797,797,797,797,797,797,797,797,797,,797,797,797,,797,797,797,797,797',
',,,,,,,,,,,,,,,,,,,797,,,797,,,797,797,,,797,,797,,,,797,,,,,,,,797',
',,,,797,797,797,797,,797,797,,,,797,797,803,803,803,803,803,803,797',
',797,803,803,,,,803,,803,803,803,803,803,803,803,,,,,,803,803,803,803',
'803,803,803,,,803,,,,,,803,803,803,803,803,803,803,803,803,803,803,803',
',803,803,803,,803,803,803,803,803,,,,,,,,,,,,,,,,,,,,803,,,803,,,803',
'803,,,803,,803,,,,803,,,,,,,,803,,,,,803,803,803,803,,803,803,,,,803',
'803,834,834,834,834,834,834,803,,803,834,834,,,,834,,834,834,834,834',
'834,834,834,,,,,,834,834,834,834,834,834,834,,,834,,,,,,834,834,834',
'834,834,834,834,834,834,834,834,834,,834,834,834,,834,834,834,834,834',
',,,,,,,,,,,,,,,,,,,834,,,834,,,834,834,,,834,,834,,,,834,,,,,,,,834',
',,,,834,834,834,834,,834,834,,,,834,834,901,901,901,901,901,901,834',
',834,901,901,,,,901,,901,901,901,901,901,901,901,,,,,,901,901,901,901',
'901,901,901,,,901,,,,,,901,901,901,901,901,901,901,901,901,901,901,901',
',901,901,901,,901,901,901,901,901,,,,,,,,,,,,,,,,,,,,901,,,901,,,901',
'901,,,901,,901,,,,901,,,,,,,,901,,,,,901,901,901,901,,901,901,,,,901',
'901,907,907,907,907,907,907,901,,901,907,907,,,,907,,907,907,907,907',
'907,907,907,,,,,,907,907,907,907,907,907,907,,,907,,,,,,907,907,907',
'907,907,907,907,907,907,907,907,907,,907,907,907,,907,907,907,907,907',
',,,,,,,,,,,,,,,,,,,907,,,907,,,907,907,,,907,,907,,,,907,,,,,,,,907',
',,,,907,907,907,907,,907,907,,,,907,907,909,909,909,909,909,909,907',
',907,909,909,,,,909,,909,909,909,909,909,909,909,,,,,,909,909,909,909',
'909,909,909,,,909,,,,,,909,909,909,909,909,909,909,909,909,909,909,909',
',909,909,909,,909,909,909,909,909,,,,,,,,,,,,,,,,,,,,909,,,909,,,909',
'909,,,909,,909,,,,909,,,,,,,,909,,,,,909,909,909,909,,909,909,,,,909',
'909,,5,5,5,5,5,909,,909,5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5,5,5,5,',
',5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,5,5,5,,,,,,,,,,,,,,,,,,',
',5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,5,,,,,5,5,5,5,,5,5,,,,5,5,,18,18,18',
',18,5,,5,18,18,,,,18,,18,18,18,18,18,18,18,,,,,,18,18,18,18,18,18,18',
',,18,,,,,,,18,,,18,18,18,18,18,18,18,18,,18,18,18,,18,18,18,18,18,,',
',,,,,,,,,,,,,,,,,18,,,18,,,18,18,,,18,,,,,,18,,,,,,,,18,,,,,18,18,18',
'18,,18,18,,,,18,18,,22,22,22,,22,18,,18,22,22,,,,22,,22,22,22,22,22',
'22,22,,,,,,22,22,22,22,22,22,22,,,22,,,,,,,22,,,22,22,22,22,22,22,22',
'22,22,22,22,22,,22,22,22,22,22,,,,,,,,,,,,,,,,,,,,22,,,22,,,22,22,,',
'22,,22,,22,,22,,,,,,,,22,,,,,22,22,22,22,,22,22,,,,22,22,,23,23,23,',
'23,22,,22,23,23,,,,23,,23,23,23,23,23,23,23,,,,,,23,23,23,23,23,23,23',
',,23,,,,,,,23,,,23,23,23,23,23,23,23,23,23,23,23,23,,23,23,23,23,23',
',,,,,,,,,,,,,,,,,,,23,,,23,,,23,23,,,23,,23,,23,,23,,,,,,,,23,,,,,23',
'23,23,23,,23,23,,,,23,23,,24,24,24,,24,23,,23,24,24,,,,24,,24,24,24',
'24,24,24,24,,,,,,24,24,24,24,24,24,24,,,24,,,,,,,24,,,24,24,24,24,24',
'24,24,24,24,24,24,24,,24,24,24,24,24,,,,,,,,,,,,,,,,,,,,24,,,24,,,24',
'24,,,24,,24,,24,,24,,,,,,,,24,,,,,24,24,24,24,,24,24,,,,24,24,,31,31',
'31,,31,24,,24,31,31,,,,31,,31,31,31,31,31,31,31,,,,,,31,31,31,31,31',
'31,31,,,31,,,,,,,31,,,31,31,31,31,31,31,31,31,,31,31,31,,31,31,,657',
'31,657,657,657,657,657,,,,,,,,,,,,,,,31,,,31,,,31,31,,,31,,31,,,,657',
',,,,,,,,657,657,657,657,31,31,31,31,,31,31,,,,31,31,,32,32,32,,32,31',
',31,32,32,,,,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32,32,32,32,,,32',
',,,,598,,32,,,32,32,32,32,32,32,32,32,,32,32,32,,32,32,,,32,598,598',
'598,598,598,598,598,598,598,598,598,,598,598,,,598,598,,32,,,32,,,32',
'32,,,32,,,598,,598,,598,598,598,598,598,598,598,,598,,,,32,32,32,32',
',32,32,,,,32,32,,598,,32,,,32,,32,38,38,38,,38,,,,38,38,,,,38,,38,38',
'38,38,38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38,38',
'38,38,38,38,,38,38,38,,38,38,38,38,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38',
'38,,,38,,,,,,38,,,,,,,,38,,,,,38,38,38,38,,38,38,,,,38,38,,39,39,39',
',39,38,,38,39,39,,,,39,,39,39,39,39,39,39,39,,,,,,39,39,39,39,39,39',
'39,,,39,,,,,,,39,,,39,39,39,39,39,39,39,39,,39,39,39,,39,39,39,39,39',
',,,,,,,,,,,,,,,,,,,39,,,39,,,39,39,,,39,,,,,,39,,,,,,,,39,,,,,39,39',
'39,39,,39,39,,,,39,39,,40,40,40,,40,39,,39,40,40,,,,40,,40,40,40,40',
'40,40,40,,,,,,40,40,40,40,40,40,40,,,40,,,,,,,40,,,40,40,40,40,40,40',
'40,40,,40,40,40,,40,40,40,40,40,,,,,,,,,,,,,,,,,,,,40,,,40,,,40,40,',
',40,,,,,,40,,,,,,,,40,,,,,40,40,40,40,,40,40,,,,40,40,,52,52,52,,52',
'40,,40,52,52,,,,52,,52,52,52,52,52,52,52,,,,,,52,52,52,52,52,52,52,',
',52,,,,,,,52,,,52,52,52,52,52,52,52,52,,52,52,52,,52,52,52,52,52,,,',
',,,,,,,,,,,,,,,,52,,,52,,,52,52,,,52,,,,,,52,,,,,,,,52,,,,,52,52,52',
'52,,52,52,,,,52,52,,53,53,53,,53,52,,52,53,53,,,,53,,53,53,53,53,53',
'53,53,,,,,,53,53,53,53,53,53,53,,,53,,,,,,,53,,,53,53,53,53,53,53,53',
'53,53,53,53,53,,53,53,53,53,53,,,,,,,,,,,,,,,,,,,,53,,,53,,,53,53,,',
'53,,53,,,,53,,,,,,,,53,,,,,53,53,53,53,,53,53,,,,53,53,,54,54,54,,54',
'53,,53,54,54,,,,54,,54,54,54,54,54,54,54,,,,,,54,54,54,54,54,54,54,',
',54,,,,,,,54,,,54,54,54,54,54,54,54,54,54,54,54,54,,54,54,54,54,54,',
',,,,,,,,,,,,,,,,,,54,,,54,,,54,54,,,54,,,,,,54,,,,,,,,54,,,,,54,54,54',
'54,,54,54,,,,54,54,,57,57,57,,57,54,,54,57,57,,,,57,,57,57,57,57,57',
'57,57,,,,,,57,57,57,57,57,57,57,,,57,,,,,,,57,,,57,57,57,57,57,57,57',
'57,,57,57,57,,57,57,57,57,57,,,,,,,,,,,,,,,,,,,,57,,,57,,,57,57,,,57',
',,,,,57,,,,,,,,57,,,,,57,57,57,57,,57,57,,,,57,57,,58,58,58,,58,57,',
'57,58,58,,,,58,,58,58,58,58,58,58,58,,,,,,58,58,58,58,58,58,58,,,58',
',,,,,,58,,,58,58,58,58,58,58,58,58,,58,58,58,,58,58,58,58,58,,,,,,,',
',,,,,,,,,,,,58,,,58,,,58,58,,,58,,,,,,58,,,,,,,,58,,,,,58,58,58,58,',
'58,58,,,,58,58,,61,61,61,,61,58,,58,61,61,,,,61,,61,61,61,61,61,61,61',
',,,,,61,61,61,61,61,61,61,,,61,,,,,,,61,,,61,61,61,61,61,61,61,61,,61',
'61,61,,61,61,61,61,61,616,616,616,616,616,616,616,616,616,616,616,,616',
'616,,,616,616,,61,,616,61,,,61,61,,,61,,,616,,616,61,616,616,616,616',
'616,616,616,61,616,,,,61,61,61,61,,61,61,,,,61,61,61,616,,616,,61,61',
',61,62,62,62,,62,,,,62,62,,,,62,,62,62,62,62,62,62,62,,,,,,62,62,62',
'62,62,62,62,,,62,,,,,,,62,,,62,62,62,62,62,62,62,62,,62,62,62,,62,62',
',659,62,659,659,659,659,659,,,,,,,,,,,,,,,62,,,62,,,62,62,,,62,,62,',
',,659,,,,,,,,,659,659,659,659,62,62,62,62,,62,62,,,,62,62,,63,63,63',
',63,62,,62,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63,63',
'63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,,63,63,63,,63,63,,701,63',
'701,701,701,701,701,,,,,,,,,,,,63,,,63,,,63,,,63,63,,,63,,,,,,701,,',
',,,,,,701,701,701,701,63,63,63,63,,63,63,,,,63,63,,64,64,64,,64,63,',
'63,64,64,,,,64,,64,64,64,64,64,64,64,,,,,,64,64,64,64,64,64,64,,,64',
',,,,,,64,,,64,64,64,64,64,64,64,64,,64,64,64,,64,64,,815,64,815,815',
'815,815,815,,,,,,,,,,,,,,,64,,,64,,,64,64,,,64,,,,,,815,,,,,,,,,815',
'815,815,815,64,64,64,64,,64,64,,,,64,64,,100,100,100,100,100,64,,64',
'100,100,,,,100,,100,100,100,100,100,100,100,,,,,,100,100,100,100,100',
'100,100,,,100,,,,,,100,100,100,100,100,100,100,100,100,100,100,100,',
'100,100,100,,100,100,100,100,100,19,19,19,19,19,19,19,19,19,19,19,,19',
'19,,,19,19,,100,,,100,,,100,100,,,100,,100,19,,19,100,19,19,19,19,19',
'19,19,100,19,,,,100,100,100,100,,100,100,,,,100,100,,19,,,,100,100,',
'100,104,104,104,,104,,,,104,104,,,,104,,104,104,104,104,104,104,104',
',,,,,104,104,104,104,104,104,104,,,104,,,,,,,104,,,104,104,104,104,104',
'104,104,104,,104,104,104,,104,104,104,104,104,,,,,,,,,,,,,,,,,,,,104',
',,104,,,104,104,,,104,,,,,,104,,,,,,,,104,,,,,104,104,104,104,,104,104',
',,,104,104,,105,105,105,,105,104,,104,105,105,,,,105,,105,105,105,105',
'105,105,105,,,,,,105,105,105,105,105,105,105,,,105,,,,,,,105,,,105,105',
'105,105,105,105,105,105,,105,105,105,,105,105,105,105,105,,,,,,,,,,',
',,,,,,,,,105,,,105,,,105,105,,,105,,,,,,105,,,,,,,,105,,,,,105,105,105',
'105,,105,105,,,,105,105,,106,106,106,,106,105,,105,106,106,,,,106,,106',
'106,106,106,106,106,106,,,,,,106,106,106,106,106,106,106,,,106,,,,,',
',106,,,106,106,106,106,106,106,106,106,,106,106,106,,106,106,106,106',
'106,,,,,,,,,,,,,,,,,,,,106,,,106,,,106,106,,,106,,,,,,106,,,,,,,,106',
',,,,106,106,106,106,,106,106,,,,106,106,,107,107,107,,107,106,,106,107',
'107,,,,107,,107,107,107,107,107,107,107,,,,,,107,107,107,107,107,107',
'107,,,107,,,,,,,107,,,107,107,107,107,107,107,107,107,,107,107,107,',
'107,107,107,107,107,,,,,,,,,,,,,,,,,,,,107,,,107,,,107,107,,,107,,,',
',,107,,,,,,,,107,,,,,107,107,107,107,,107,107,,,,107,107,,108,108,108',
'108,108,107,,107,108,108,,,,108,,108,108,108,108,108,108,108,,,,,,108',
'108,108,108,108,108,108,,,108,,,,,,108,108,108,108,108,108,108,108,108',
'108,108,108,,108,108,108,,108,108,108,108,108,,,,,,,,,,,,,,,,,,,,108',
',,108,,,108,108,,,108,,108,,,,108,,,,,,,,108,,,,,108,108,108,108,,108',
'108,,,,108,108,,195,195,195,,195,108,,108,195,195,,,,195,,195,195,195',
'195,195,195,195,,,,,,195,195,195,195,195,195,195,,,195,,,,,,,195,,,195',
'195,195,195,195,195,195,195,,195,195,195,,195,195,195,195,195,,,,,,',
',,,,,,,,,,,,,195,,,195,,,195,195,,,195,,195,,,,195,,,,,,,,195,,,,,195',
'195,195,195,,195,195,,,,195,195,,196,196,196,,196,195,,195,196,196,',
',,196,,196,196,196,196,196,196,196,,,,,,196,196,196,196,196,196,196',
',,196,,,,,,,196,,,196,196,196,196,196,196,196,196,,196,196,196,,196',
'196,196,196,196,,,,,,,,,,,,,,,,,,,,196,,,196,,,196,196,,,196,,196,,',
',196,,,,,,,,196,,,,,196,196,196,196,,196,196,,,,196,196,,197,197,197',
',197,196,,196,197,197,,,,197,,197,197,197,197,197,197,197,,,,,,197,197',
'197,197,197,197,197,,,197,,,,,,,197,,,197,197,197,197,197,197,197,197',
',197,197,197,,197,197,197,197,197,,,,,,,,,,,,,,,,,,,,197,,,197,,,197',
'197,,,197,,,,,,197,,,,,,,,197,,,,,197,197,197,197,,197,197,,,,197,197',
',198,198,198,,198,197,,197,198,198,,,,198,,198,198,198,198,198,198,198',
',,,,,198,198,198,198,198,198,198,,,198,,,,,,,198,,,198,198,198,198,198',
'198,198,198,198,198,198,198,,198,198,198,198,198,,,,,,,,,,,,,,,,,,,',
'198,,,198,,,198,198,,,198,,198,,198,,198,,,,,,,,198,,,,,198,198,198',
'198,,198,198,,,,198,198,,201,201,201,,201,198,,198,201,201,,,,201,,201',
'201,201,201,201,201,201,,,,,,201,201,201,201,201,201,201,,,201,,,,,',
',201,,,201,201,201,201,201,201,201,201,,201,201,201,,201,201,201,201',
'201,,,,,,,,,,,,,,,,,,,,201,,,201,,,201,201,,,201,,,,,,201,,,,,,,,201',
',,,,201,201,201,201,,201,201,,,,201,201,,202,202,202,,202,201,,201,202',
'202,,,,202,,202,202,202,202,202,202,202,,,,,,202,202,202,202,202,202',
'202,,,202,,,,,,,202,,,202,202,202,202,202,202,202,202,,202,202,202,',
'202,202,202,202,202,,,,,,,,,,,,,,,,,,,,202,,,202,,,202,202,,,202,,,',
',,202,,,,,,,,202,,,,,202,202,202,202,,202,202,,,,202,202,,203,203,203',
',203,202,,202,203,203,,,,203,,203,203,203,203,203,203,203,,,,,,203,203',
'203,203,203,203,203,,,203,,,,,,,203,,,203,203,203,203,203,203,203,203',
',203,203,203,,203,203,203,203,203,,,,,,,,,,,,,,,,,,,,203,,,203,,,203',
'203,,,203,,,,,,203,,,,,,,,203,,,,,203,203,203,203,,203,203,,,,203,203',
',204,204,204,,204,203,,203,204,204,,,,204,,204,204,204,204,204,204,204',
',,,,,204,204,204,204,204,204,204,,,204,,,,,,,204,,,204,204,204,204,204',
'204,204,204,,204,204,204,,204,204,204,204,204,,,,,,,,,,,,,,,,,,,,204',
',,204,,,204,204,,,204,,,,,,204,,,,,,,,204,,,,,204,204,204,204,,204,204',
',,,204,204,,205,205,205,,205,204,,204,205,205,,,,205,,205,205,205,205',
'205,205,205,,,,,,205,205,205,205,205,205,205,,,205,,,,,,,205,,,205,205',
'205,205,205,205,205,205,,205,205,205,,205,205,205,205,205,,,,,,,,,,',
',,,,,,,,,205,,,205,,,205,205,,,205,,,,,,205,,,,,,,,205,,,,,205,205,205',
'205,,205,205,,,,205,205,205,215,215,215,,215,205,,205,215,215,,,,215',
',215,215,215,215,215,215,215,,,,,,215,215,215,215,215,215,215,,,215',
',,,,,,215,,,215,215,215,215,215,215,215,215,,215,215,215,,215,215,215',
'215,215,,,,,,,,,,,,,,,,,,,,215,,,215,,,215,215,,,215,,,,,,215,,,,,,',
',215,,,,,215,215,215,215,,215,215,,,,215,215,,218,218,218,,218,215,',
'215,218,218,,,,218,,218,218,218,218,218,218,218,,,,,,218,218,218,218',
'218,218,218,,,218,,,,,,,218,,,218,218,218,218,218,218,218,218,,218,218',
'218,,218,218,218,218,218,,,,,,,,,,,,,,,,,,,,218,,,218,,,218,218,,,218',
',,,,,218,,,,,,,,218,,,,,218,218,218,218,,218,218,,,,218,218,,219,219',
'219,,219,218,,218,219,219,,,,219,,219,219,219,219,219,219,219,,,,,,219',
'219,219,219,219,219,219,,,219,,,,,,,219,,,219,219,219,219,219,219,219',
'219,,219,219,219,,219,219,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,',
',219,219,,,219,,,,,,219,,,,,,,,219,,,,,219,219,219,219,,219,219,,,,219',
'219,,220,220,220,,220,219,,219,220,220,,,,220,,220,220,220,220,220,220',
'220,,,,,,220,220,220,220,220,220,220,,,220,,,,,,,220,,,220,220,220,220',
'220,220,220,220,,220,220,220,,220,220,220,220,220,,,,,,,,,,,,,,,,,,',
',220,,,220,,,220,220,,,220,,,,,,220,,,,,,,,220,,,,,220,220,220,220,',
'220,220,,,,220,220,,221,221,221,,221,220,,220,221,221,,,,221,,221,221',
'221,221,221,221,221,,,,,,221,221,221,221,221,221,221,,,221,,,,,,,221',
',,221,221,221,221,221,221,221,221,,221,221,221,,221,221,221,221,221',
',,,,,,,,,,,,,,,,,,,221,,,221,,,221,221,,,221,,,,,,221,,,,,,,,221,,,',
',221,221,221,221,,221,221,,,,221,221,,222,222,222,,222,221,,221,222',
'222,,,,222,,222,222,222,222,222,222,222,,,,,,222,222,222,222,222,222',
'222,,,222,,,,,,,222,,,222,222,222,222,222,222,222,222,,222,222,222,',
'222,222,222,222,222,,,,,,,,,,,,,,,,,,,,222,,,222,,,222,222,,,222,,,',
',,222,,,,,,,,222,,,,,222,222,222,222,,222,222,,,,222,222,,223,223,223',
',223,222,,222,223,223,,,,223,,223,223,223,223,223,223,223,,,,,,223,223',
'223,223,223,223,223,,,223,,,,,,,223,,,223,223,223,223,223,223,223,223',
',223,223,223,,223,223,223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223',
'223,,,223,,,,,,223,,,,,,,,223,,,,,223,223,223,223,,223,223,,,,223,223',
',224,224,224,,224,223,,223,224,224,,,,224,,224,224,224,224,224,224,224',
',,,,,224,224,224,224,224,224,224,,,224,,,,,,,224,,,224,224,224,224,224',
'224,224,224,,224,224,224,,224,224,224,224,224,,,,,,,,,,,,,,,,,,,,224',
',,224,,,224,224,,,224,,,,,,224,,,,,,,,224,,,,,224,224,224,224,,224,224',
',,,224,224,,225,225,225,,225,224,,224,225,225,,,,225,,225,225,225,225',
'225,225,225,,,,,,225,225,225,225,225,225,225,,,225,,,,,,,225,,,225,225',
'225,225,225,225,225,225,,225,225,225,,225,225,225,225,225,,,,,,,,,,',
',,,,,,,,,225,,,225,,,225,225,,,225,,,,,,225,,,,,,,,225,,,,,225,225,225',
'225,,225,225,,,,225,225,,226,226,226,,226,225,,225,226,226,,,,226,,226',
'226,226,226,226,226,226,,,,,,226,226,226,226,226,226,226,,,226,,,,,',
',226,,,226,226,226,226,226,226,226,226,,226,226,226,,226,226,226,226',
'226,,,,,,,,,,,,,,,,,,,,226,,,226,,,226,226,,,226,,,,,,226,,,,,,,,226',
',,,,226,226,226,226,,226,226,,,,226,226,,227,227,227,,227,226,,226,227',
'227,,,,227,,227,227,227,227,227,227,227,,,,,,227,227,227,227,227,227',
'227,,,227,,,,,,,227,,,227,227,227,227,227,227,227,227,,227,227,227,',
'227,227,227,227,227,,,,,,,,,,,,,,,,,,,,227,,,227,,,227,227,,,227,,,',
',,227,,,,,,,,227,,,,,227,227,227,227,,227,227,,,,227,227,,228,228,228',
',228,227,,227,228,228,,,,228,,228,228,228,228,228,228,228,,,,,,228,228',
'228,228,228,228,228,,,228,,,,,,,228,,,228,228,228,228,228,228,228,228',
',228,228,228,,228,228,228,228,228,,,,,,,,,,,,,,,,,,,,228,,,228,,,228',
'228,,,228,,,,,,228,,,,,,,,228,,,,,228,228,228,228,,228,228,,,,228,228',
',229,229,229,,229,228,,228,229,229,,,,229,,229,229,229,229,229,229,229',
',,,,,229,229,229,229,229,229,229,,,229,,,,,,,229,,,229,229,229,229,229',
'229,229,229,,229,229,229,,229,229,229,229,229,,,,,,,,,,,,,,,,,,,,229',
',,229,,,229,229,,,229,,,,,,229,,,,,,,,229,,,,,229,229,229,229,,229,229',
',,,229,229,,230,230,230,,230,229,,229,230,230,,,,230,,230,230,230,230',
'230,230,230,,,,,,230,230,230,230,230,230,230,,,230,,,,,,,230,,,230,230',
'230,230,230,230,230,230,,230,230,230,,230,230,230,230,230,,,,,,,,,,',
',,,,,,,,,230,,,230,,,230,230,,,230,,,,,,230,,,,,,,,230,,,,,230,230,230',
'230,,230,230,,,,230,230,,231,231,231,,231,230,,230,231,231,,,,231,,231',
'231,231,231,231,231,231,,,,,,231,231,231,231,231,231,231,,,231,,,,,',
',231,,,231,231,231,231,231,231,231,231,,231,231,231,,231,231,231,231',
'231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,231,,,231,,,,,,231,,,,,,,,231',
',,,,231,231,231,231,,231,231,,,,231,231,,232,232,232,,232,231,,231,232',
'232,,,,232,,232,232,232,232,232,232,232,,,,,,232,232,232,232,232,232',
'232,,,232,,,,,,,232,,,232,232,232,232,232,232,232,232,,232,232,232,',
'232,232,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232,,,232,232,,,232,,,',
',,232,,,,,,,,232,,,,,232,232,232,232,,232,232,,,,232,232,,233,233,233',
',233,232,,232,233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233',
'233,233,233,233,233,,,233,,,,,,,233,,,233,233,233,233,233,233,233,233',
',233,233,233,,233,233,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233',
'233,,,233,,,,,,233,,,,,,,,233,,,,,233,233,233,233,,233,233,,,,233,233',
',234,234,234,,234,233,,233,234,234,,,,234,,234,234,234,234,234,234,234',
',,,,,234,234,234,234,234,234,234,,,234,,,,,,,234,,,234,234,234,234,234',
'234,234,234,,234,234,234,,234,234,234,234,234,,,,,,,,,,,,,,,,,,,,234',
',,234,,,234,234,,,234,,,,,,234,,,,,,,,234,,,,,234,234,234,234,,234,234',
',,,234,234,,235,235,235,,235,234,,234,235,235,,,,235,,235,235,235,235',
'235,235,235,,,,,,235,235,235,235,235,235,235,,,235,,,,,,,235,,,235,235',
'235,235,235,235,235,235,,235,235,235,,235,235,235,235,235,,,,,,,,,,',
',,,,,,,,,235,,,235,,,235,235,,,235,,,,,,235,,,,,,,,235,,,,,235,235,235',
'235,,235,235,,,,235,235,,236,236,236,,236,235,,235,236,236,,,,236,,236',
'236,236,236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,',
',236,,,236,236,236,236,236,236,236,236,,236,236,236,,236,236,236,236',
'236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,236',
',,,,236,236,236,236,,236,236,,,,236,236,,237,237,237,,237,236,,236,237',
'237,,,,237,,237,237,237,237,237,237,237,,,,,,237,237,237,237,237,237',
'237,,,237,,,,,,,237,,,237,237,237,237,237,237,237,237,,237,237,237,',
'237,237,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237,,,',
',,237,,,,,,,,237,,,,,237,237,237,237,,237,237,,,,237,237,,238,238,238',
',238,237,,237,238,238,,,,238,,238,238,238,238,238,238,238,,,,,,238,238',
'238,238,238,238,238,,,238,,,,,,,238,,,238,238,238,238,238,238,238,238',
',238,238,238,,238,238,238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238',
'238,,,238,,,,,,238,,,,,,,,238,,,,,238,238,238,238,,238,238,,,,238,238',
',239,239,239,,239,238,,238,239,239,,,,239,,239,239,239,239,239,239,239',
',,,,,239,239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239,239,239',
'239,239,239,,239,239,239,,239,239,239,239,239,,,,,,,,,,,,,,,,,,,,239',
',,239,,,239,239,,,239,,,,,,239,,,,,,,,239,,,,,239,239,239,239,,239,239',
',,,239,239,,240,240,240,,240,239,,239,240,240,,,,240,,240,240,240,240',
'240,240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,,,240,,,240,240',
'240,240,240,240,240,240,,240,240,240,,240,240,240,240,240,,,,,,,,,,',
',,,,,,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,240,,,,,240,240,240',
'240,,240,240,,,,240,240,,241,241,241,,241,240,,240,241,241,,,,241,,241',
'241,241,241,241,241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,',
',241,,,241,241,241,241,241,241,241,241,,241,241,241,,241,241,241,241',
'241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,,,241',
',,,,241,241,241,241,,241,241,,,,241,241,,242,242,242,,242,241,,241,242',
'242,,,,242,,242,242,242,242,242,242,242,,,,,,242,242,242,242,242,242',
'242,,,242,,,,,,,242,,,242,242,242,242,242,242,242,242,,242,242,242,',
'242,242,242,242,242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,',
',,242,,,,,,,,242,,,,,242,242,242,242,,242,242,,,,242,242,,243,243,243',
',243,242,,242,243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243',
'243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,243',
',243,243,243,,243,243,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243',
'243,,,243,,,,,,243,,,,,,,,243,,,,,243,243,243,243,,243,243,,,,243,243',
',252,252,252,,252,243,,243,252,252,,,,252,,252,252,252,252,252,252,252',
',,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252,252,252',
'252,252,252,,252,252,252,,252,252,252,252,252,,,,,,,,,,,,,,,,,,,,252',
',,252,,,252,252,,,252,,,,,,252,,,,,,,,252,,,,,252,252,252,252,,252,252',
',,,252,252,,254,254,254,,254,252,,252,254,254,,,,254,,254,254,254,254',
'254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254,254',
'254,254,254,254,254,254,,254,254,254,,254,254,254,254,254,,,,,,,,,,',
',,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,254,,,,,254,254,254',
'254,,254,254,,,,254,254,,259,259,259,,259,254,,254,259,259,,,,259,,259',
'259,259,259,259,259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,',
',259,,,259,259,259,259,259,259,259,259,,259,259,259,,259,259,259,259',
'259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259,,,,,,,,259',
',,,,259,259,259,259,,259,259,,,,259,259,,265,265,265,,265,259,,259,265',
'265,,,,265,,265,265,265,265,265,265,265,,,,,,265,265,265,265,265,265',
'265,,,265,,,,,,,265,,,265,265,265,265,265,265,265,265,265,265,265,265',
',265,265,265,265,265,,,,,,,,,,,,,,,,,,,,265,,,265,,,265,265,,,265,,265',
',265,,265,,,,,,,,265,,,,,265,265,265,265,,265,265,,,,265,265,,266,266',
'266,,266,265,,265,266,266,,,,266,,266,266,266,266,266,266,266,,,,,,266',
'266,266,266,266,266,266,,,266,,,,,,,266,,,266,266,266,266,266,266,266',
'266,266,266,266,266,,266,266,266,266,266,,,,,,,,,,,,,,,,,,,,266,,,266',
',,266,266,,,266,,266,,266,,266,,,,,,,,266,,,,,266,266,266,266,,266,266',
',,,266,266,,274,274,274,,274,266,,266,274,274,,,,274,,274,274,274,274',
'274,274,274,,,,,,274,274,274,274,274,274,274,,,274,,,,,,,274,,,274,274',
'274,274,274,274,274,274,274,274,274,274,,274,274,274,274,274,,,,,,,',
',,,,,,,,,,,,274,,,274,,,274,274,,,274,,274,,274,,274,,,,,,,,274,,,,',
'274,274,274,274,,274,274,,,,274,274,274,280,280,280,,280,274,,274,280',
'280,,,,280,,280,280,280,280,280,280,280,,,,,,280,280,280,280,280,280',
'280,,,280,,,,,,,280,,,280,280,280,280,280,280,280,280,,280,280,280,',
'280,280,,,280,247,247,247,247,247,247,247,247,247,247,247,,247,247,',
',247,247,,280,,,280,,,280,280,,,280,,,247,,247,,247,247,247,247,247',
'247,247,,247,,,,280,280,280,280,,280,280,,,,280,280,,247,,280,,,280',
',280,293,293,293,,293,,,,293,293,,,,293,,293,293,293,293,293,293,293',
',,,,,293,293,293,293,293,293,293,,,293,,,,,,,293,,,293,293,293,293,293',
'293,293,293,,293,293,293,,293,293,,817,293,817,817,817,817,817,,,,,',
',,,,,,,,,293,,,293,,,293,293,,,293,,,,,,817,,,,,,,,,817,817,817,817',
'293,293,293,293,,293,293,,,,293,293,,302,302,302,,302,293,,293,302,302',
',,,302,,302,302,302,302,302,302,302,,,,,,302,302,302,302,302,302,302',
',,302,,,,,,,302,,,302,302,302,302,302,302,302,302,,302,302,302,,302',
'302,302,302,302,,,,,,,,,,,,,,,,,,,,302,,,302,302,,302,302,,,302,,,,',
',302,,,,,,,,302,,,,,302,302,302,302,,302,302,,,,302,302,,319,319,319',
',319,302,,302,319,319,,,,319,,319,319,319,319,319,319,319,,,,,,319,319',
'319,319,319,319,319,,,319,,,,,,,319,,,319,319,319,319,319,319,319,319',
',319,319,319,,319,319,319,319,319,,,,,,,,,,,,,,,,,,,,319,,,319,,,319',
'319,,,319,,,,,,319,,,,,,,,319,,,,,319,319,319,319,,319,319,,,,319,319',
',320,320,320,,320,319,,319,320,320,,,,320,,320,320,320,320,320,320,320',
',,,,,320,320,320,320,320,320,320,,,320,,,,,,,320,,,320,320,320,320,320',
'320,320,320,,320,320,320,,320,320,320,320,320,,,,,,,,,,,,,,,,,,,,320',
',,320,,,320,320,,,320,,,,,,320,,,,,,,,320,,,,,320,320,320,320,,320,320',
',,,320,320,,338,338,338,,338,320,,320,338,338,,,,338,,338,338,338,338',
'338,338,338,,,,,,338,338,338,338,338,338,338,,,338,,,,,,,338,,,338,338',
'338,338,338,338,338,338,,338,338,338,,338,338,338,338,338,,,,,,,,,,',
',,,,,,,,,338,,,338,,,338,338,,,338,,,,,,338,,,,,,,,338,,,,,338,338,338',
'338,,338,338,,,,338,338,,353,353,353,,353,338,,338,353,353,,,,353,,353',
'353,353,353,353,353,353,,,,,,353,353,353,353,353,353,353,,,353,,,,,',
',353,,,353,353,353,353,353,353,353,353,,353,353,353,,353,353,353,353',
'353,,,,,,,,,,,,,,,,,,,,353,,,353,,,353,353,,,353,,,,,,353,,,,,,,,353',
',,,,353,353,353,353,,353,353,,,,353,353,,380,380,380,,380,353,,353,380',
'380,,,,380,,380,380,380,380,380,380,380,,,,,,380,380,380,380,380,380',
'380,,,380,,,,,,,380,,,380,380,380,380,380,380,380,380,,380,380,380,',
'380,380,380,380,380,,,,,,,,,,,,,,,,,,,,380,,,380,,,380,380,,,380,,,',
',,380,,,,,,,,380,,,,,380,380,380,380,,380,380,,,,380,380,,412,412,412',
',412,380,,380,412,412,,,,412,,412,412,412,412,412,412,412,,,,,,412,412',
'412,412,412,412,412,,,412,,,,,,,412,,,412,412,412,412,412,412,412,412',
'412,412,412,412,,412,412,412,412,412,,,,,,,,,,,,,,,,,,,,412,,,412,,',
'412,412,,,412,,412,,412,,412,,,,,,,,412,,,,,412,412,412,412,,412,412',
',,,412,412,,414,414,414,,414,412,,412,414,414,,,,414,,414,414,414,414',
'414,414,414,,,,,,414,414,414,414,414,414,414,,,414,,,,,,,414,,,414,414',
'414,414,414,414,414,414,,414,414,414,,414,414,414,414,414,,,,,,,,,,',
',,,,,,,,,414,,,414,,,414,414,,,414,,,,,,414,,,,,,,,414,,,,,414,414,414',
'414,,414,414,,,,414,414,,415,415,415,,415,414,,414,415,415,,,,415,,415',
'415,415,415,415,415,415,,,,,,415,415,415,415,415,415,415,,,415,,,,,',
',415,,,415,415,415,415,415,415,415,415,,415,415,415,,415,415,415,415',
'415,,,,,,,,,,,,,,,,,,,,415,,,415,,,415,415,,,415,,,,,,415,,,,,,,,415',
',,,,415,415,415,415,,415,415,,,,415,415,,416,416,416,,416,415,,415,416',
'416,,,,416,,416,416,416,416,416,416,416,,,,,,416,416,416,416,416,416',
'416,,,416,,,,,,,416,,,416,416,416,416,416,416,416,416,,416,416,416,',
'416,416,416,416,416,,,,,,,,,,,,,,,,,,,,416,,,416,,,416,416,,,416,,,',
',,416,,,,,,,,416,,,,,416,416,416,416,,416,416,,,,416,416,,445,445,445',
',445,416,,416,445,445,,,,445,,445,445,445,445,445,445,445,,,,,,445,445',
'445,445,445,445,445,,,445,,,,,,,445,,,445,445,445,445,445,445,445,445',
'445,445,445,445,,445,445,445,445,445,,,,,,,,,,,,,,,,,,,,445,,,445,,',
'445,445,,,445,,445,,445,,445,,,,,,,,445,,,,,445,445,445,445,,445,445',
',,,445,445,,447,447,447,,447,445,,445,447,447,,,,447,,447,447,447,447',
'447,447,447,,,,,,447,447,447,447,447,447,447,,,447,,,,,,,447,,,447,447',
'447,447,447,447,447,447,447,447,447,447,,447,447,447,447,447,,,,,,,',
',,,,,,,,,,,,447,,,447,,,447,447,,,447,,,,447,,447,,,,,,,,447,,,,,447',
'447,447,447,,447,447,,,,447,447,,449,449,449,,449,447,,447,449,449,',
',,449,,449,449,449,449,449,449,449,,,,,,449,449,449,449,449,449,449',
',,449,,,,,,,449,,,449,449,449,449,449,449,449,449,,449,449,449,,449',
'449,449,449,449,,,,,,,,,,,,,,,,,,,,449,,,449,,,449,449,,,449,,,,,,449',
',,,,,,,449,,,,,449,449,449,449,,449,449,,,,449,449,,461,461,461,,461',
'449,,449,461,461,,,,461,,461,461,461,461,461,461,461,,,,,,461,461,461',
'461,461,461,461,,,461,,,,,,,461,,,461,461,461,461,461,461,461,461,461',
'461,461,461,,461,461,461,461,461,,,,,,,,,,,,,,,,,,,,461,,,461,,,461',
'461,,,461,,,,461,,461,,,,,,,,461,,,,,461,461,461,461,,461,461,,,,461',
'461,,471,471,471,,471,461,,461,471,471,,,,471,,471,471,471,471,471,471',
'471,,,,,,471,471,471,471,471,471,471,,,471,,,,,,,471,,,471,471,471,471',
'471,471,471,471,,471,471,471,,471,471,,844,471,844,844,844,844,844,',
',,,,,,,,,,,,,471,,,471,,,471,471,,,471,,,,,,844,,,,,,,,,844,844,844',
'844,471,471,471,471,,471,471,,,,471,471,,473,473,473,,473,471,,471,473',
'473,,,,473,,473,473,473,473,473,473,473,,,,,,473,473,473,473,473,473',
'473,,,473,,,,,,,473,,,473,473,473,473,473,473,473,473,473,473,473,473',
',473,473,473,473,473,,,,,,,,,,,,,,,,,,,,473,,,473,,,473,473,,,473,,473',
',473,,473,,,,,,,,473,,,,,473,473,473,473,,473,473,,,,473,473,,480,480',
'480,,480,473,,473,480,480,,,,480,,480,480,480,480,480,480,480,,,,,,480',
'480,480,480,480,480,480,,,480,,,,,,,480,,,480,480,480,480,480,480,480',
'480,,480,480,480,,480,480,,870,480,870,870,870,870,870,,,,,,,,,,,,,',
',480,,,480,,,480,480,,,480,,,,,,870,870,,,,,,,,870,870,870,870,480,480',
'480,480,,480,480,,,,480,480,,483,483,483,,483,480,,480,483,483,,,,483',
',483,483,483,483,483,483,483,,,,,,483,483,483,483,483,483,483,,,483',
',,,,,,483,,,483,483,483,483,483,483,483,483,,483,483,483,,483,483,483',
'483,483,,,,,,,,,,,,,,,,,,,,483,,,483,,,483,483,,,483,,,,,,483,,,,,,',
',483,,,,,483,483,483,483,,483,483,,,,483,483,,484,484,484,,484,483,',
'483,484,484,,,,484,,484,484,484,484,484,484,484,,,,,,484,484,484,484',
'484,484,484,,,484,,,,,,,484,,,484,484,484,484,484,484,484,484,,484,484',
'484,,484,484,484,484,484,,,,,,,,,,,,,,,,,,,,484,,,484,,,484,484,,,484',
',,,,,484,,,,,,,,484,,,,,484,484,484,484,,484,484,,,,484,484,,485,485',
'485,,485,484,,484,485,485,,,,485,,485,485,485,485,485,485,485,,,,,,485',
'485,485,485,485,485,485,,,485,,,,,,,485,,,485,485,485,485,485,485,485',
'485,,485,485,485,,485,485,485,485,485,,,,,,,,,,,,,,,,,,,,485,,,485,',
',485,485,,,485,,,,,,485,,,,,,,,485,,,,,485,485,485,485,,485,485,,,,485',
'485,,489,489,489,,489,485,,485,489,489,,,,489,,489,489,489,489,489,489',
'489,,,,,,489,489,489,489,489,489,489,,,489,,,,,,,489,,,489,489,489,489',
'489,489,489,489,,489,489,489,,489,489,489,489,489,,,,,,,,,,,,,,,,,,',
',489,,,489,,,489,489,,,489,,,,,,489,,,,,,,,489,,,,,489,489,489,489,',
'489,489,,,,489,489,,491,491,491,,491,489,,489,491,491,,,,491,,491,491',
'491,491,491,491,491,,,,,,491,491,491,491,491,491,491,,,491,,,,,,,491',
',,491,491,491,491,491,491,491,491,,491,491,491,,491,491,491,491,491',
',,,,,,,,,,,,,,,,,,,491,,,491,,,491,491,,,491,,491,,,,491,,,,,,,,491',
',,,,491,491,491,491,,491,491,,,,491,491,,495,495,495,,495,491,,491,495',
'495,,,,495,,495,495,495,495,495,495,495,,,,,,495,495,495,495,495,495',
'495,,,495,,,,,,,495,,,495,495,495,495,495,495,495,495,495,495,495,495',
',495,495,495,495,495,,,,,,,,,,,,,,,,,,,,495,,,495,,,495,495,,,495,,495',
',,,495,,,,,,,,495,,,,,495,495,495,495,,495,495,,,,495,495,,498,498,498',
',498,495,,495,498,498,,,,498,,498,498,498,498,498,498,498,,,,,,498,498',
'498,498,498,498,498,,,498,,,,,,,498,,,498,498,498,498,498,498,498,498',
'498,498,498,498,,498,498,498,498,498,,,,,,,,,,,,,,,,,,,,498,,,498,,',
'498,498,,,498,,,,,,498,,,,,,,,498,,,,,498,498,498,498,,498,498,,,,498',
'498,,534,534,534,,534,498,,498,534,534,,,,534,,534,534,534,534,534,534',
'534,,,,,,534,534,534,534,534,534,534,,,534,,,,,,,534,,,534,534,534,534',
'534,534,534,534,,534,534,534,,534,534,534,534,534,,,,,,,,,,,,,,,,,,',
',534,,,534,,,534,534,,,534,,534,,,,534,,,,,,,,534,,,,,534,534,534,534',
',534,534,,,,534,534,,535,535,535,,535,534,,534,535,535,,,,535,,535,535',
'535,535,535,535,535,,,,,,535,535,535,535,535,535,535,,,535,,,,,,,535',
',,535,535,535,535,535,535,535,535,535,535,535,535,,535,535,535,535,535',
',,,,,,,,,,,,,,,,,,,535,,,535,,,535,535,,,535,,535,,535,,535,,,,,,,,535',
',,,,535,535,535,535,,535,535,,,,535,535,,545,545,545,,545,535,,535,545',
'545,,,,545,,545,545,545,545,545,545,545,,,,,,545,545,545,545,545,545',
'545,,,545,,,,,,,545,,,545,545,545,545,545,545,545,545,545,545,545,545',
',545,545,545,545,545,,,,,,,,,,,,,,,,,,,,545,,,545,,,545,545,,,545,,545',
',545,,545,,,,,,,,545,,,,,545,545,545,545,,545,545,,,,545,545,,548,548',
'548,,548,545,,545,548,548,,,,548,,548,548,548,548,548,548,548,,,,,,548',
'548,548,548,548,548,548,,,548,,,,,,,548,,,548,548,548,548,548,548,548',
'548,,548,548,548,,548,548,548,548,548,,,,,,,,,,,,,,,,,,,,548,,,548,',
',548,548,,,548,,,,,,548,,,,,,,,548,,,,,548,548,548,548,,548,548,,,,548',
'548,,576,576,576,,576,548,,548,576,576,,,,576,,576,576,576,576,576,576',
'576,,,,,,576,576,576,576,576,576,576,,,576,,,,,,,576,,,576,576,576,576',
'576,576,576,576,,576,576,576,,576,576,576,576,576,,,,,,,,,,,,,,,,,,',
',576,,,576,,,576,576,,,576,,,,,,576,,,,,,,,576,,,,,576,576,576,576,',
'576,576,,,,576,576,,578,578,578,,578,576,,576,578,578,,,,578,,578,578',
'578,578,578,578,578,,,,,,578,578,578,578,578,578,578,,,578,,,,,,,578',
',,578,578,578,578,578,578,578,578,,578,578,578,,578,578,578,578,578',
',,,,,,,,,,,,,,,,,,,578,,,578,,,578,578,,,578,,578,,,,578,,,,,,,,578',
',,,,578,578,578,578,,578,578,,,,578,578,,579,579,579,,579,578,,578,579',
'579,,,,579,,579,579,579,579,579,579,579,,,,,,579,579,579,579,579,579',
'579,,,579,,,,,,,579,,,579,579,579,579,579,579,579,579,,579,579,579,',
'579,579,579,579,579,,,,,,,,,,,,,,,,,,,,579,,,579,,,579,579,,,579,,,',
',,579,,,,,,,,579,,,,,579,579,579,579,,579,579,,,,579,579,,582,582,582',
',582,579,,579,582,582,,,,582,,582,582,582,582,582,582,582,,,,,,582,582',
'582,582,582,582,582,,,582,,,,,,,582,,,582,582,582,582,582,582,582,582',
',582,582,582,,582,582,582,582,582,,,,,,,,,,,,,,,,,,,,582,,,582,,,582',
'582,,,582,,,,,,582,,,,,,,,582,,,,,582,582,582,582,,582,582,,,,582,582',
',583,583,583,,583,582,,582,583,583,,,,583,,583,583,583,583,583,583,583',
',,,,,583,583,583,583,583,583,583,,,583,,,,,,,583,,,583,583,583,583,583',
'583,583,583,,583,583,583,,583,583,583,583,583,,,,,,,,,,,,,,,,,,,,583',
',,583,,,583,583,,,583,,,,,,583,,,,,,,,583,,,,,583,583,583,583,,583,583',
',,,583,583,,587,587,587,,587,583,,583,587,587,,,,587,,587,587,587,587',
'587,587,587,,,,,,587,587,587,587,587,587,587,,,587,,,,,,,587,,,587,587',
'587,587,587,587,587,587,,587,587,587,,587,587,587,587,587,,,,,,,,,,',
',,,,,,,,,587,,,587,,,587,587,,,587,,,,,,587,,,,,,,,587,,,,,587,587,587',
'587,,587,587,,,,587,587,,590,590,590,,590,587,,587,590,590,,,,590,,590',
'590,590,590,590,590,590,,,,,,590,590,590,590,590,590,590,,,590,,,,,',
',590,,,590,590,590,590,590,590,590,590,,590,590,590,,590,590,590,590',
'590,,,,,,,,,,,,,,,,,,,,590,,,590,,,590,590,,,590,,,,,,590,,,,,,,,590',
',,,,590,590,590,590,,590,590,,,,590,590,,607,607,607,,607,590,,590,607',
'607,,,,607,,607,607,607,607,607,607,607,,,,,,607,607,607,607,607,607',
'607,,,607,,,,,,,607,,,607,607,607,607,607,607,607,607,,607,607,607,',
'607,607,607,607,607,,,,,,,,,,,,,,,,,,,,607,,,607,,,607,607,,,607,,,',
',,607,,,,,,,,607,,,,,607,607,607,607,,607,607,,,,607,607,,626,626,626',
',626,607,,607,626,626,,,,626,,626,626,626,626,626,626,626,,,,,,626,626',
'626,626,626,626,626,,,626,,,,,,,626,,,626,626,626,626,626,626,626,626',
',626,626,626,,626,626,,910,626,910,910,910,910,910,,,,,,,,,,,,,,,626',
',,626,,,626,626,,,626,,,,,,910,,,,,,,,,910,910,910,910,626,626,626,626',
',626,626,,,,626,626,,637,637,637,,637,626,,626,637,637,,,,637,,637,637',
'637,637,637,637,637,,,,,,637,637,637,637,637,637,637,,,637,,,,,,,637',
',,637,637,637,637,637,637,637,637,,637,637,637,,637,637,,,637,,,,,,',
',,,,,,,,,,,,,637,,,637,,,637,637,,,637,,,,,,,,,,,,,,,,,,,637,637,637',
'637,,637,637,,,,637,637,,664,664,664,,664,637,,637,664,664,,,,664,,664',
'664,664,664,664,664,664,,,,,,664,664,664,664,664,664,664,,,664,,,,,',
',664,,,664,664,664,664,664,664,664,664,,664,664,664,,664,664,664,664',
'664,,,,,,,,,,,,,,,,,,,,664,,,664,,,664,664,,,664,,,,,,664,,,,,,,,664',
',,,,664,664,664,664,,664,664,,,,664,664,,690,690,690,,690,664,,664,690',
'690,,,,690,,690,690,690,690,690,690,690,,,,,,690,690,690,690,690,690',
'690,,,690,,,,,,,690,,,690,690,690,690,690,690,690,690,,690,690,690,',
'690,690,690,690,690,,,,,,,,,,,,,,,,,,,,690,,,690,,,690,690,,,690,,,',
',,690,,,,,,,,690,,,,,690,690,690,690,,690,690,,,,690,690,,718,718,718',
',718,690,,690,718,718,,,,718,,718,718,718,718,718,718,718,,,,,,718,718',
'718,718,718,718,718,,,718,,,,,,,718,,,718,718,718,718,718,718,718,718',
',718,718,718,,718,718,718,718,718,,,,,,,,,,,,,,,,,,,,718,,,718,,,718',
'718,,,718,,,,,,718,,,,,,,,718,,,,,718,718,718,718,,718,718,,,,718,718',
',720,720,720,,720,718,,718,720,720,,,,720,,720,720,720,720,720,720,720',
',,,,,720,720,720,720,720,720,720,,,720,,,,,,,720,,,720,720,720,720,720',
'720,720,720,,720,720,720,,720,720,720,720,720,,,,,,,,,,,,,,,,,,,,720',
',,720,,,720,720,,,720,,,,,,720,,,,,,,,720,,,,,720,720,720,720,,720,720',
',,,720,720,,731,731,731,,731,720,,720,731,731,,,,731,,731,731,731,731',
'731,731,731,,,,,,731,731,731,731,731,731,731,,,731,,,,,,,731,,,731,731',
'731,731,731,731,731,731,,731,731,731,,731,731,731,731,731,,,,,,,,,,',
',,,,,,,,,731,,,731,,,731,731,,,731,,,,,,731,,,,,,,,731,,,,,731,731,731',
'731,,731,731,,,,731,731,,732,732,732,,732,731,,731,732,732,,,,732,,732',
'732,732,732,732,732,732,,,,,,732,732,732,732,732,732,732,,,732,,,,,',
',732,,,732,732,732,732,732,732,732,732,,732,732,732,,732,732,732,732',
'732,,,,,,,,,,,,,,,,,,,,732,,,732,,,732,732,,,732,,,,,,732,,,,,,,,732',
',,,,732,732,732,732,,732,732,,,,732,732,,733,733,733,,733,732,,732,733',
'733,,,,733,,733,733,733,733,733,733,733,,,,,,733,733,733,733,733,733',
'733,,,733,,,,,,,733,,,733,733,733,733,733,733,733,733,,733,733,733,',
'733,733,733,733,733,,,,,,,,,,,,,,,,,,,,733,,,733,,,733,733,,,733,,,',
',,733,,,,,,,,733,,,,,733,733,733,733,,733,733,,,,733,733,,735,735,735',
',735,733,,733,735,735,,,,735,,735,735,735,735,735,735,735,,,,,,735,735',
'735,735,735,735,735,,,735,,,,,,,735,,,735,735,735,735,735,735,735,735',
',735,735,735,,735,735,735,735,735,,,,,,,,,,,,,,,,,,,,735,,,735,,,735',
'735,,,735,,,,,,735,,,,,,,,735,,,,,735,735,735,735,,735,735,,,,735,735',
',746,746,746,,746,735,,735,746,746,,,,746,,746,746,746,746,746,746,746',
',,,,,746,746,746,746,746,746,746,,,746,,,,,,,746,,,746,746,746,746,746',
'746,746,746,746,746,746,746,,746,746,746,746,746,,,,,,,,,,,,,,,,,,,',
'746,,,746,,,746,746,,,746,,746,,746,,746,,,,,,,,746,,,,,746,746,746',
'746,,746,746,,,,746,746,,749,749,749,,749,746,,746,749,749,,,,749,,749',
'749,749,749,749,749,749,,,,,,749,749,749,749,749,749,749,,,749,,,,,',
',749,,,749,749,749,749,749,749,749,749,749,749,749,749,,749,749,749',
'749,749,,,,,,,,,,,,,,,,,,,,749,,,749,,,749,749,,,749,,749,,749,,749',
',,,,,,,749,,,,,749,749,749,749,,749,749,,,,749,749,,764,764,764,,764',
'749,,749,764,764,,,,764,,764,764,764,764,764,764,764,,,,,,764,764,764',
'764,764,764,764,,,764,,,,,,,764,,,764,764,764,764,764,764,764,764,,764',
'764,764,,764,764,,,764,,,,,,,,,,,,,,,,,,,,764,,,764,,,764,764,,,764',
',,,,,,,,,,,,,,,,,,764,764,764,764,,764,764,,,,764,764,,791,791,791,',
'791,764,,764,791,791,,,,791,,791,791,791,791,791,791,791,,,,,,791,791',
'791,791,791,791,791,,,791,,,,,,,791,,,791,791,791,791,791,791,791,791',
',791,791,791,,791,791,791,791,791,,,,,,,,,,,,,,,,,,,,791,,,791,,,791',
'791,,,791,,,,,,791,,,,,,,,791,,,,,791,791,791,791,,791,791,,,,791,791',
',796,796,796,,796,791,,791,796,796,,,,796,,796,796,796,796,796,796,796',
',,,,,796,796,796,796,796,796,796,,,796,,,,,,,796,,,796,796,796,796,796',
'796,796,796,,796,796,796,,796,796,796,796,796,,,,,,,,,,,,,,,,,,,,796',
',,796,,,796,796,,,796,,796,,,,796,,,,,,,,796,,,,,796,796,796,796,,796',
'796,,,,796,796,,813,813,813,,813,796,,796,813,813,,,,813,,813,813,813',
'813,813,813,813,,,,,,813,813,813,813,813,813,813,,,813,,,,,,,813,,,813',
'813,813,813,813,813,813,813,,813,813,813,,813,813,813,813,813,,,,,,',
',,,,,,,,,,,,,813,,,813,,,813,813,,,813,,,,,,813,,,,,,,,813,,,,,813,813',
'813,813,,813,813,,,,813,813,,823,823,823,,823,813,,813,823,823,,,,823',
',823,823,823,823,823,823,823,,,,,,823,823,823,823,823,823,823,,,823',
',,,,,,823,,,823,823,823,823,823,823,823,823,,823,823,823,,823,823,,',
'823,,,,,,,,,,,,,,,,,,,,823,,,823,,,823,823,,,823,,,,,,,,,,,,,,,,,,,823',
'823,823,823,,823,823,,,,823,823,,882,882,882,,882,823,,823,882,882,',
',,882,,882,882,882,882,882,882,882,,,,,,882,882,882,882,882,882,882',
',,882,,,,,,,882,,,882,882,882,882,882,882,882,882,,882,882,882,,882',
'882,882,882,882,,,,,,,,,,,,,,,,,,,,882,,,882,,,882,882,,,882,,882,,882',
',882,,,,,,,,882,,,,,882,882,882,882,,882,882,,,,882,882,,885,885,885',
',885,882,,882,885,885,,,,885,,885,885,885,885,885,885,885,,,,,,885,885',
'885,885,885,885,885,,,885,,,,,,,885,,,885,885,885,885,885,885,885,885',
'885,885,885,885,,885,885,885,885,885,,,,,,,,,,,,,,,,,,,,885,,,885,,',
'885,885,,,885,,885,,885,,885,,,,,,,,885,,,,,885,885,885,885,,885,885',
',,,885,885,,888,888,888,,888,885,,885,888,888,,,,888,,888,888,888,888',
'888,888,888,,,,,,888,888,888,888,888,888,888,,,888,,,,,,,888,,,888,888',
'888,888,888,888,888,888,888,888,888,888,,888,888,888,888,888,403,403',
'403,403,403,403,403,403,403,403,403,,403,403,,,403,403,,888,,,888,,',
'888,888,,,888,,888,403,888,403,888,403,403,403,403,403,403,403,888,403',
',,,888,888,888,888,,888,888,,,,888,888,,403,27,,,,888,,888,27,27,27',
',,27,27,27,,27,,,,,,,,,27,27,27,,,,,,,,,27,27,,27,27,27,27,27,,,,,,',
',,,,,,,,,,,,,,,,27,27,27,27,27,27,27,27,27,27,27,27,27,27,,,27,27,27',
',,27,,27,27,,,27,27,,27,,27,,27,,27,27,27,27,27,27,27,28,27,27,27,,',
',28,28,28,,,28,28,28,,28,27,27,,27,,27,,,,28,28,,,,,,,,,28,28,,28,28',
'28,28,28,,,,,,,,,,,,,,,,,,,,,,,28,28,28,28,28,28,28,28,28,28,28,28,28',
'28,,,28,28,28,,,28,,28,28,,,28,28,,28,,28,,28,,28,28,28,28,28,28,28',
'391,28,,28,,,,391,391,391,,,391,391,391,,391,28,28,,28,,28,,,391,391',
'391,,,,,,,,,391,391,,391,391,391,391,391,,,,,,,,,,,,,,,,,,,,,,,391,391',
'391,391,391,391,391,391,391,391,391,391,391,391,,,391,391,391,,,391',
',391,391,,,391,391,,391,,391,,391,,391,391,391,391,391,391,391,452,391',
'391,391,,,,452,452,452,,,452,452,452,,452,391,391,,391,,391,,,,452,',
',,,,,,,,452,452,,452,452,452,452,452,,,,,,,,,,,,455,,,,,,,455,455,455',
',,455,455,455,,455,,,,,,452,,,,455,,,452,,,,,452,452,455,455,,455,455',
'455,455,455,,,,,,199,199,,,199,,,,452,,,,199,199,,199,199,199,199,199',
'199,199,452,,199,199,,452,455,199,199,199,199,,,455,,,199,,455,455,',
',,,199,199,,199,199,199,199,199,199,199,199,199,199,199,,,199,455,,',
',,,,,,,,,,,455,,,,,455,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6',
'6,,,,6,6,6,6,6,6,6,6,6,6,,,,,,6,6,6,6,6,6,6,6,6,6,,6,,,,,,,,6,6,,6,6',
'6,6,6,6,6,,,6,6,,,,6,6,6,6,,,,,,,,,,,,,,6,6,,6,6,6,6,6,6,6,6,6,6,6,',
',6,6,,,,,,,,,,,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,,,',
'7,7,7,7,7,7,7,7,7,7,,,,,,7,7,7,7,7,7,7,7,7,,,7,,,,,,,,7,7,,7,7,7,7,7',
'7,7,,,7,7,,,,7,7,7,7,,,,,,,,,,,,,,7,7,,7,7,7,7,7,7,7,7,7,7,7,,,7,7,',
',,,,,,,,,7,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369',
'369,369,369,369,369,369,369,369,369,,,,369,369,369,369,369,369,369,369',
'369,369,,,,,,369,369,369,369,369,369,369,369,369,,,369,,,,,,,,369,369',
',369,369,369,369,369,369,369,,,369,369,,,,369,369,369,369,,,,,,,,,,',
',,,369,369,,369,369,369,369,369,369,369,369,369,369,369,,,369,369,,',
',,,,,,,,369,573,573,573,573,573,573,573,573,573,573,573,573,573,573',
'573,573,573,573,573,573,573,573,573,573,,,,573,573,573,573,573,573,573',
'573,573,573,,,,,,573,573,573,573,573,573,573,573,573,,,573,,,,,,,,573',
'573,,573,573,573,573,573,573,573,,,573,573,,,,573,573,573,573,,,,,,',
',,,,,,,573,573,,573,573,573,573,573,573,573,573,573,573,573,,,573,573',
',,,,,,,,,,573,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65',
'65,65,65,65,65,65,,,,65,65,65,65,65,65,65,65,65,65,,,,,,65,65,65,65',
'65,65,65,65,65,65,65,65,,65,,,,,,65,65,,65,65,65,65,65,65,65,,,65,65',
',,,65,65,65,65,,,,,,65,,,,,,,,65,65,,65,65,65,65,65,65,65,65,65,65,65',
',,65,703,703,703,703,703,703,703,703,703,703,703,703,703,703,703,703',
'703,703,703,703,703,703,703,703,,,,703,703,703,703,703,703,703,703,703',
'703,,,,,,703,703,703,703,703,703,703,703,703,,,703,,,,,,,,703,703,,703',
'703,703,703,703,703,703,,,703,703,,,,703,703,703,703,,,,,,,,,,,,,,703',
'703,,703,703,703,703,703,703,703,703,703,703,703,200,200,703,,200,,',
',,,,,200,200,,200,200,200,200,200,200,200,,,200,200,,,,200,200,200,200',
',,,,,200,,,,,,,,200,200,,200,200,200,200,200,200,200,200,200,200,200',
'262,262,200,,262,,,,,,,,262,262,,262,262,262,262,262,262,262,,,262,262',
',,,262,262,262,262,,,,,,,,,,,,,,262,262,,262,262,262,262,262,262,262',
'262,262,262,262,263,263,262,,263,,,,,,,,263,263,,263,263,263,263,263',
'263,263,,,263,263,,,,263,263,263,263,,,,,,,,,,,,,,263,263,,263,263,263',
'263,263,263,263,263,263,263,263,410,410,263,,410,,,,,,,,410,410,,410',
'410,410,410,410,410,410,,,410,410,,,,410,410,410,410,,,,,,410,,,,,,',
',410,410,,410,410,410,410,410,410,410,410,410,410,410,411,411,410,,411',
',,,,,,,411,411,,411,411,411,411,411,411,411,,,411,411,,,,411,411,411',
'411,,,,,,411,,,,,,,,411,411,,411,411,411,411,411,411,411,411,411,411',
'411,474,474,411,,474,,,,,,,,474,474,,474,474,474,474,474,474,474,,,474',
'474,,,,474,474,474,474,,,,,,474,,,,,,,,474,474,,474,474,474,474,474',
'474,474,474,474,474,474,475,475,474,,475,,,,,,,,475,475,,475,475,475',
'475,475,475,475,,,475,475,,,,475,475,475,475,,,,,,475,,,,,,,,475,475',
',475,475,475,475,475,475,475,475,475,475,475,486,486,475,,486,,,,,,',
',486,486,,486,486,486,486,486,486,486,,,486,486,,,,486,486,486,486,',
',,,,486,,,,,,,,486,486,,486,486,486,486,486,486,486,486,486,486,486',
'487,487,486,,487,,,,,,,,487,487,,487,487,487,487,487,487,487,,,487,487',
',,,487,487,487,487,,,,,,487,,,,,,,,487,487,,487,487,487,487,487,487',
'487,487,487,487,487,536,536,487,,536,,,,,,,,536,536,,536,536,536,536',
'536,536,536,,,536,536,,,,536,536,536,536,,,,,,536,,,,,,,,536,536,,536',
'536,536,536,536,536,536,536,536,536,536,537,537,536,,537,,,,,,,,537',
'537,,537,537,537,537,537,537,537,,,537,537,,,,537,537,537,537,,,,,,537',
',,,,,,,537,537,,537,537,537,537,537,537,537,537,537,537,537,543,543',
'537,,543,,,,,,,,543,543,,543,543,543,543,543,543,543,,,543,543,,,,543',
'543,543,543,,,,,,543,,,,,,,,543,543,,543,543,543,543,543,543,543,543',
'543,543,543,544,544,543,,544,,,,,,,,544,544,,544,544,544,544,544,544',
'544,,,544,544,,,,544,544,544,544,,,,,,544,,,,,,,,544,544,,544,544,544',
'544,544,544,544,544,544,544,544,889,889,544,,889,,,,,,,,889,889,,889',
'889,889,889,889,889,889,,,889,889,,,,889,889,889,889,,,,,,889,,,,,,',
',889,889,,889,889,889,889,889,889,889,889,889,889,889,890,890,889,,890',
',,,,,,,890,890,,890,890,890,890,890,890,890,,,890,890,,,,890,890,890',
'890,,,,,,890,,,,,,,,890,890,,890,890,890,890,890,890,890,890,890,890',
'890,918,918,890,,918,,,,,,,,918,918,,918,918,918,918,918,918,918,,,918',
'918,,,,918,918,918,918,,,,,,918,,,,,,,,918,918,,918,918,918,918,918',
'918,918,918,918,918,918,,,918,442,442,442,442,442,442,442,442,442,442',
'442,,442,442,,,442,442,,,,,,,,,,,,,,,442,,442,,442,442,442,442,442,442',
'442,,442,,488,488,488,488,488,488,488,488,488,488,488,,488,488,442,442',
'488,488,,,,,,,,,,,,,,,488,,488,,488,488,488,488,488,488,488,,488,,638',
'638,638,638,638,638,638,638,638,638,638,,638,638,,488,638,638,,,,,,',
',,,,,,,,638,,638,,638,638,638,638,638,638,638,,638,,716,716,716,716',
'716,716,716,716,716,716,716,,716,716,,638,716,716,,,,,,,,,,,,,,,716',
',716,,716,716,716,716,716,716,716,,716,,719,719,719,719,719,719,719',
'719,719,719,719,,719,719,,716,719,719,,,,,,,,,,,,,,,719,,719,,719,719',
'719,719,719,719,719,,719,,723,723,723,723,723,723,723,723,723,723,723',
',723,723,,719,723,723,,,,,,,,,,,,,,,723,,723,,723,723,723,723,723,723',
'723,,723,,725,725,725,725,725,725,725,725,725,725,725,,725,725,,723',
'725,725,,,,,,,,,,,,,,,725,,725,,725,725,725,725,725,725,725,,725,,728',
'728,728,728,728,728,728,728,728,728,728,,728,728,,725,728,728,,,,,,',
',,,,,,,,728,,728,,728,728,728,728,728,728,728,,728,,730,730,730,730',
'730,730,730,730,730,730,730,,730,730,,728,730,730,,,,,,,,,,,,,,,730',
',730,,730,730,730,730,730,730,730,,730,,812,812,812,812,812,812,812',
'812,812,812,812,,812,812,,730,812,812,,,,,,,,,,,,,,,812,,812,,812,812',
'812,812,812,812,812,,812,,814,814,814,814,814,814,814,814,814,814,814',
',814,814,,812,814,814,,,,,,,,,,,,,,,814,,814,,814,814,814,814,814,814',
'814,,814,,,,,,,,,,,,,,,,,814' ]
        racc_action_check = arr = ::Array.new(23120, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
     0,    80,   nil,    62,  1403,  4744, 20916, 21040,    10,    39,
    29,    57,   133,   521,    55,   481,   nil,    29,  4869,  7135,
   202,   nil,  4994,  5119,  5244,   316,   249, 20404, 20513,   nil,
   738,  5369,  5494,   nil,   114,   240,   231,   564,  5627,  5752,
  5877,   176,   611,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   866,   999,  6002,  6127,  6252,     0,   nil,  6377,  6502,   nil,
   nil,  6627,  6760,  6885,  7010, 21412,   nil,   nil,   nil,   nil,
   nil,   252,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     0,   nil,   nil,   130,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   382,   nil,
  7135,   nil,   nil,   nil,  7268,  7393,  7518,  7643,  7768,  1499,
   nil,   721,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   270,   nil,  1124,  1249,  7893,  8018,  8143,  8268, 20784,
 21584,  8393,  8518,  8643,  8768,  8893,   nil,   nil,   738,    54,
   350,   242,   272,   325,   nil,  9018,  1374,   324,  9143,  9268,
  9393,  9518,  9643,  9768,  9893, 10018, 10143, 10268, 10393, 10518,
 10643, 10768, 10893, 11018, 11143, 11268, 11393, 11518, 11643, 11768,
 11893, 12018, 12143, 12268,   nil,   nil,   nil, 13143,   nil,   308,
   318,   nil, 12393,   383, 12518,   nil,   nil,   nil,   nil, 12643,
   nil,   nil, 21644, 21704,   388, 12768, 12893,   nil,   nil,   nil,
   nil,   nil,   nil,   nil, 13018,   393,  1499,   404,   448,   424,
 13143,  1624,   741,   874,   507,   898,   483,   456,   346,   nil,
   520,   575,   498, 13276,   nil,   268,   572,   626,   903,   nil,
   628,   nil, 13401,   695,   703,   626,   nil,   254,   310,   622,
   606,   368,   637,   nil,   nil,   830,   647,    48,   136, 13526,
 13651,   335,   711,   606,    65,   931,   692,    89,   738,   nil,
   nil,   356,   418,    96,   nil,  1002,   nil,    55, 13776,   nil,
   nil,   484,   509,   564,   584,   649,   651,   668,   787,   792,
   nil,   827,   nil, 13901,   nil,   342,   369,   382,   412,    39,
   466,   nil,  1527,   nil,   nil,   nil,   nil,   nil,   nil, 21164,
   nil,   nil,   nil,   nil,   663,   682,   nil,   nil,   738,   nil,
 14026,   669,   nil,   690,   nil,   nil,  1624,   702,   nil,   277,
   402, 20622,   nil,   nil,   nil,   239,   748,   348,   nil,   nil,
  1752,  1861,   nil, 20276,   nil,   nil,   nil,   123,   nil,   761,
 21764, 21824, 14151,   244, 14276, 14401, 14526,  1994,  2119,   648,
   758,   802,   811,   822,   823,  1499,  3619,  3744,  2244,  1810,
  2369,  2494,  2619,  2744,  2869,  2994,  3119,  3244,   530,   793,
  3369,  3494, 22532,    79,   nil, 14651,   nil, 14776,   nil, 14901,
   nil,   nil, 20731,   nil,   nil, 20786,   nil,   nil,   764,   nil,
   nil, 15026,   117,   136,   773,   nil,   774,   772,   nil,   nil,
   788, 15151,   795, 15276, 21884, 21944,  1004,   842,   nil,   nil,
 15401,   817,   nil, 15526, 15651, 15776, 22004, 22064, 22578, 15901,
   938, 16026,   nil,   828,   nil, 16151,   nil,   nil, 16276,   nil,
   nil,   nil,    94,   666,   824,   832,   834,   836,   nil,   nil,
   nil,   nil,   nil,   nil,    76,   926,   nil,   603,   nil,   nil,
   nil,   nil,   928,   nil,   nil,   930,  1994,   971,   nil,  2119,
   119,   142,   970,   989, 16401, 16526, 22124, 22184,   112,   nil,
   nil,  1127,   nil, 22244, 22304, 16651,   nil,   nil, 16776,   345,
   146,  2244,  1716,   nil,   nil,   nil,   247,   nil,   nil,   nil,
   931,   nil,   nil,   nil,   888,   nil,   nil,   274,   nil,   nil,
   877,   nil,   nil, 21288,   nil,   nil, 16901,   882, 17026, 17151,
   478,   918, 17276, 17401,   917,   nil,   nil, 17526,   927,   nil,
 17651,   nil,   nil,   273,   358,   473,   603,   899,  5494,   898,
   nil,   567,   nil,  2369,   898,   nil,   948, 17776,   nil,   nil,
   nil,   nil,   nil,   nil,   320,   nil,  6627,    -6,   926,   nil,
   933,   nil,  2494,  2619,   nil,   243, 17901,   937,   nil,   954,
   125,   198,   994,   443,  1129,   996,   960, 18026, 22624,  1026,
  1027,   283,  1090,   nil,  2744,   970,  1023,   nil,   nil,   nil,
   465,   nil,  2869,  2994,   981,  1264,   nil,  5382,   nil,  6773,
   nil,   nil,  1021,  1066, 18151,   nil,   nil,   985,   nil,   993,
   468,  1045,  1010,   nil,   nil,   764,   nil,  1123,   nil,   nil,
   nil,   nil,  1131,   nil,   140,  1022,   141,   156,   263,   269,
 18276,   481,  1254,   nil,  1025,  3119,   464,   nil,   nil,  1143,
  3244,  6898,   701, 21524,   nil,   nil,   nil,   nil,   nil,   nil,
  3369,   nil,   nil,   nil,   nil,   nil, 22670,  1031, 18401, 22716,
 18526,   nil,   nil, 22762,   nil, 22808,   nil,   nil, 22854,   nil,
 22900, 18651, 18776, 18901,   373, 19026,  1051,  1055,  1062,   nil,
  1097,  1077,   266,   nil,  1201,   nil, 19151,   nil,  3494, 19276,
   nil,   nil,  1091,  1112,  1226,  1107,   385,   nil,   nil,   nil,
  3619,   nil,   nil,   163, 19401,   nil,   nil,  1125,  1233,  1121,
  1128,   nil,   nil,   nil,  1132,  1133,   nil,   nil,  1136,  1144,
   nil,  1147,   nil,   nil,  1151,  1014,  1156,   859,   nil,  1296,
   nil, 19526,  1300,  3744,  3869,   nil, 19651,  3994,   171,   205,
   nil,  1307,   nil,  4119,   nil,  1311,  1204,   nil,   nil,  1221,
  1206,   nil, 22946, 19776, 22992,  7023,   nil, 13289,   nil,   nil,
  1050,   nil,  1234, 19901,   nil,  1220,  1240,  1231,   nil,  1232,
   nil,   nil,   nil,   nil,  4244,  1130,  1252,  1307,  1255,   nil,
   nil,   nil,   nil,  1360, 15164,   nil,   nil,  1146,   nil,  1175,
   nil,  1271,   nil,   nil,   nil,   596,   869,  1238,   nil,   164,
   nil,  1363,  1373,   nil,   287,   nil,   nil,  1377,   nil,   nil,
 15414,   nil,  1258,  1261,  1269,  1272,   nil,  1273,   nil,  1364,
  1355,   nil, 20026,   nil,   nil, 20151,   nil,  1409, 20276, 22364,
 22424,  1377,   nil,  1301,  1305,  1311,  1326,  1329,  1110,  1331,
  1139,  4369,   nil,   nil,   nil,   nil,   nil,  4494,   nil,  4619,
 17914,   nil,   nil,  1300,   nil,  1396,   nil,   nil, 22484,   nil,
  1335,   nil,  1341,   165,   166,   209,  1379,   nil,  1425,   nil,
   nil,   nil,  1235,  1344,   836,  1465,  1468,  1356,  1357,  1358,
  1363,  1408,  1418,   nil,   173,  1382,  1383,   nil,   nil,   nil,
   nil,  1521,   nil,   nil,   nil,   nil,  1386,   nil ]

racc_action_default = [
    -4,  -545,    -1,  -531,    -5,  -545,  -545,  -545,  -545,  -545,
  -545,  -545,  -545,  -545,  -273,   -32,   -33,  -533,  -545,   -38,
   -40,   -41,  -283,  -318,  -319,   -45,  -248,  -248,  -248,   -58,
    -4,   -62,   -70,   -72,  -545,  -460,  -545,  -545,  -545,  -545,
  -545,  -533,  -225,  -266,  -267,  -268,  -269,  -270,  -271,  -272,
  -521,    -4,  -545,  -544,  -513,  -291,  -373,  -545,  -545,  -296,
  -299,  -531,  -545,  -545,  -545,  -545,  -320,  -321,  -409,  -410,
  -411,  -412,  -413,  -428,  -416,  -417,  -430,  -432,  -421,  -426,
  -442,  -430,  -444,  -445,  -519,  -449,  -450,  -520,  -452,  -453,
  -454,  -455,  -456,  -457,  -458,  -459,  -462,  -463,  -545,    -3,
  -532,  -540,  -541,  -542,  -545,  -545,  -545,  -545,  -545,    -7,
    -8,  -545,   -99,  -100,  -101,  -102,  -103,  -104,  -105,  -106,
  -107,  -111,  -112,  -113,  -114,  -115,  -116,  -117,  -118,  -119,
  -120,  -121,  -122,  -123,  -124,  -125,  -126,  -127,  -128,  -129,
  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,
  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,
  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,
  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,
  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,
  -180,   -13,  -108,    -4,    -4,  -545,  -545,  -545,  -234,  -545,
  -545,  -545,  -545,  -545,  -545,  -533,  -534,   -37,  -545,  -460,
  -545,  -273,  -545,  -545,  -217,  -545,    -4,  -545,  -545,  -545,
  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,  -545,
  -545,  -545,  -545,  -545,  -379,  -381,   -42,  -226,  -236,  -258,
  -258,  -241,  -545,  -259,  -545,  -283,  -318,  -319,  -515,  -545,
   -43,   -44,  -545,  -545,   -50,  -234,  -545,  -290,  -384,  -393,
  -395,   -56,  -390,   -57,  -533,   -60,    -4,  -533,  -545,   -63,
   -66,    -4,   -78,  -545,  -545,   -85,  -286,  -533,  -545,  -322,
  -391,  -545,   -68,  -545,   -74,  -280,  -446,  -447,  -545,  -202,
  -203,  -218,  -545,  -401,  -545,  -276,  -227,  -537,  -537,  -545,
  -545,  -537,  -545,  -292,  -293,  -483,   -39,  -545,  -545,  -545,
  -545,  -531,  -545,  -532,  -460,  -545,  -545,  -273,  -545,  -332,
  -333,   -94,   -95,  -545,   -97,  -545,  -273,  -545,  -545,  -460,
  -311,   -99,  -100,  -140,  -141,  -142,  -158,  -163,  -170,  -173,
  -313,  -545,  -511,  -545,  -414,  -545,  -545,  -545,  -545,  -545,
  -545,   958,    -6,  -543,   -14,   -15,   -16,   -17,   -18,  -545,
   -10,   -11,   -12,  -109,  -545,  -545,   -21,   -29,  -181,  -259,
  -545,  -545,   -22,   -30,   -31,   -23,  -183,  -533,  -235,  -522,
  -523,  -248,  -388,  -524,  -525,  -522,  -248,  -523,  -387,  -389,
  -524,  -525,   -28,  -191,   -34,   -35,   -36,  -533,  -289,  -545,
  -545,  -545,  -234,  -280,  -545,  -545,  -545,  -192,  -193,  -194,
  -195,  -196,  -197,  -198,  -199,  -204,  -205,  -206,  -207,  -208,
  -209,  -210,  -211,  -212,  -213,  -214,  -215,  -216,  -219,  -220,
  -221,  -222,  -533,  -362,  -237,  -257,  -238,  -257,  -255,  -545,
  -260,  -518,  -248,  -522,  -523,  -248,   -48,   -51,  -533,  -249,
  -250,  -251,  -362,  -362,  -533,  -285,  -533,   -59,  -278,   -75,
   -64,  -545,  -533,  -234,  -545,  -545,   -84,  -545,  -446,  -447,
  -545,   -71,   -76,  -545,  -545,  -545,  -545,  -545,  -223,  -545,
  -544,  -544,  -275,  -533,  -228,  -539,  -538,  -230,  -539,  -281,
  -282,  -514,  -545,  -483,  -367,  -510,  -510,  -510,  -482,  -484,
  -485,  -486,  -487,  -488,  -489,  -545,  -492,  -545,  -494,  -500,
  -502,  -503,  -505,  -506,  -507,  -545,    -4,  -323,  -324,    -4,
  -545,  -545,  -545,  -545,  -545,  -234,  -545,  -545,  -280,  -304,
   -94,   -95,   -96,  -545,  -545,  -234,  -307,  -464,  -545,  -545,
  -545,    -4,  -483,  -315,  -529,  -530,  -533,  -415,  -429,  -434,
  -545,  -436,  -418,  -431,  -545,  -433,  -420,  -545,  -423,  -425,
  -545,  -443,    -9,  -545,   -19,   -20,  -545,  -265,  -545,  -545,
  -392,  -545,  -545,  -545,   -52,  -233,  -385,  -545,   -54,  -386,
  -545,  -288,  -535,  -522,  -523,  -522,  -523,  -533,  -181,  -545,
  -363,  -367,  -365,    -4,  -258,  -256,  -261,  -545,  -516,  -517,
   -46,  -382,   -47,  -383,  -362,  -231,   -38,  -545,  -258,  -247,
  -533,  -253,    -4,    -4,  -284,   -61,  -545,   -67,   -73,  -533,
  -522,  -523,  -232,   -81,   -83,  -545,   -69,  -545,  -190,  -200,
  -201,  -533,  -544,  -330,    -4,  -402,  -544,  -403,  -404,  -277,
  -537,  -374,    -4,    -4,  -367,  -545,  -376,  -545,  -475,  -545,
  -478,  -480,  -545,  -545,  -545,  -491,  -334,  -545,  -336,  -338,
  -345,  -489,  -533,  -504,  -508,  -544,  -325,  -544,  -297,  -326,
  -327,  -300,  -545,  -303,  -545,  -533,  -522,  -523,  -526,  -279,
  -545,   -94,   -95,   -98,  -533,    -4,  -545,  -466,  -309,  -545,
    -4,  -483,  -545,  -545,  -512,  -435,  -438,  -439,  -440,  -441,
    -4,  -419,  -422,  -424,  -427,  -110,  -182,  -263,  -545,  -184,
  -545,  -536,   -25,  -186,   -26,  -187,   -53,   -27,  -188,   -55,
  -189,  -545,  -545,  -545,  -392,  -545,  -510,  -510,  -510,  -361,
  -545,  -367,  -489,  -498,  -545,  -239,  -257,  -262,    -4,  -545,
  -244,  -252,  -533,  -545,  -545,   -65,   -79,   -77,  -287,    -2,
    -4,  -408,  -331,  -545,  -545,  -406,  -229,  -545,  -545,  -533,
  -368,  -369,  -371,  -372,  -510,  -510,  -495,  -509,  -510,  -510,
  -501,  -510,  -490,  -496,  -533,  -545,  -343,  -545,  -493,  -545,
  -328,  -545,  -545,    -4,    -4,  -302,  -545,    -4,  -392,  -545,
  -392,  -545,  -465,    -4,  -312,  -545,  -533,  -468,  -316,  -545,
  -264,   -24,  -185,  -545,  -224,  -352,  -354,  -545,  -357,  -359,
  -545,  -364,  -545,  -545,  -380,  -258,  -545,  -258,  -243,  -258,
  -254,  -394,  -396,  -407,    -4,   -86,  -545,  -545,   -93,  -405,
  -377,  -378,  -375,  -545,  -545,  -471,  -473,  -545,  -476,  -545,
  -479,  -545,  -481,  -335,  -337,  -341,  -545,  -346,  -294,  -545,
  -295,  -545,  -545,  -261,  -544,  -305,  -308,  -545,  -314,  -467,
  -483,  -437,  -510,  -510,  -510,  -510,  -499,  -510,  -366,  -497,
  -545,  -240,  -257,   -49,  -242,  -257,  -245,  -401,  -234,  -545,
  -545,   -92,  -370,  -510,  -510,  -510,  -510,  -339,  -545,  -344,
  -545,    -4,  -298,  -301,  -397,  -398,  -399,    -4,  -310,    -4,
  -545,  -349,  -351,  -545,  -355,  -545,  -358,  -360,  -545,  -280,
  -258,  -400,  -533,  -522,  -523,  -526,   -91,  -469,  -545,  -472,
  -474,  -477,  -545,  -342,  -544,  -545,  -545,  -510,  -510,  -510,
  -510,  -279,  -526,  -246,  -392,  -510,  -340,  -329,  -306,  -317,
  -347,  -545,  -350,  -353,  -356,  -470,  -510,  -348 ]

clist = [
'115,115,387,508,10,304,207,307,350,10,279,306,248,248,248,308,311,12',
'204,490,700,533,12,99,305,605,580,605,481,316,316,526,529,316,10,608',
'391,396,504,444,446,619,302,789,268,272,292,12,642,103,494,497,678,681',
'501,10,737,738,275,115,264,271,273,776,110,192,329,457,12,458,771,118',
'118,377,384,656,316,316,316,316,542,322,780,603,672,558,608,565,568',
'317,318,120,120,321,773,1,277,857,854,452,455,109,622,623,10,611,876',
'103,613,356,289,289,10,775,360,778,759,12,337,340,100,191,330,369,614',
'12,573,309,621,459,620,752,352,310,313,314,364,365,366,367,328,289,289',
'289,546,351,553,493,319,381,381,793,246,260,261,320,794,690,907,695',
'803,551,552,703,870,741,899,770,502,651,315,245,740,443,404,405,406',
'407,462,463,904,646,763,376,382,385,354,355,248,402,357,508,358,567',
'401,359,362,10,10,876,705,710,774,,368,,627,,933,,12,12,,854,,636,597',
'392,,,10,776,,,,769,654,,,,,682,,12,784,792,734,,,,508,,946,,,,,391',
'396,,,,,666,748,248,248,776,892,,,,,,248,,,780,756,,872,873,482,874',
',,,629,,,10,,773,,,10,,,477,739,693,316,316,12,470,,,713,12,,893,,947',
',275,,268,,272,275,550,632,822,13,,,,,13,,,865,,632,798,556,605,,,828',
',208,,800,608,208,208,208,909,685,,532,466,13,283,283,,472,14,694,,530',
'531,14,,,,,,289,,755,,115,13,208,937,103,,647,208,208,289,632,208,325',
'335,335,14,285,285,632,,547,,,,726,581,508,,729,,766,745,,460,,797,14',
',,248,666,464,401,786,604,750,585,327,336,336,13,589,,,208,208,208,208',
'13,905,618,806,584,,572,392,,588,,,305,118,,,,,,,,,599,,381,,,14,648',
'482,,,,120,,14,650,,482,,641,605,248,,605,,,,401,585,,,585,,,,834,,',
',401,,,,,610,,684,612,,,392,,,,,,,,,,,,392,699,13,13,208,208,208,208',
',,208,208,208,208,208,,316,666,,666,,248,,,,13,10,401,,10,,248,,401',
',,,14,14,12,,,12,,,,289,,,,392,10,2,,508,289,,944,392,906,14,,,115,12',
',722,724,,901,,727,679,679,208,208,696,,,,,,278,208,,13,,897,666,283',
'13,697,698,,581,,761,,,921,765,482,283,10,,,,,,,,881,757,884,,886,12',
',,,14,,10,10,285,14,581,715,208,208,666,,666,,118,12,12,285,,,,,808',
',10,801,585,208,,589,805,,10,10,120,,,12,316,,,,208,,666,12,12,,,,,',
',,,,,,,,,736,581,,,,,,922,312,,581,,115,,10,825,,,827,10,289,,,811,',
'943,829,12,,10,,289,12,,,,,799,,,208,632,12,,,,,,,,,,,,,,,802,779,,',
'781,,807,374,375,,10,,,,,867,,,,,,316,10,12,,,839,,,,278,,208,,,12,',
',,,,,283,,208,,,,,,,283,,,,10,10,,,10,208,,,,,10,,,12,12,,,12,,,,,285',
'12,,,859,,,,,285,,,,278,,379,383,,278,10,13,,,13,289,,679,,920,208,',
',12,,,,,,,208,,,208,,936,13,,,,,,,,,,14,,,14,248,,,,,,401,,,,,,,448',
',450,,208,208,,451,14,208,875,289,,877,10,,392,709,,,10,401,10,,,13',
',12,,,,,581,12,,12,,894,,,895,,896,,13,13,,,283,,,,,,,,,,,283,14,,,',
',,13,,26,,,,,26,13,13,,,,14,14,,,285,,,26,,,,26,26,26,,285,,,,26,,,14',
',938,,,939,,940,14,14,,208,,,,,13,,26,26,945,13,,,26,26,,577,26,,,13',
',,,,,,,,,208,,956,,,,,,,,14,,,,,14,,,,,,,,,,14,26,408,13,,26,26,26,26',
'26,,,,,,13,,,,836,,,,,675,,606,677,312,,609,,,,,,,,14,,,,617,,,,208',
',13,13,14,,13,,838,,,,13,,,,,,,,,,,,,465,645,,467,,606,,879,312,,,,14',
'14,,,14,,13,,,,14,26,26,26,26,26,26,,744,26,26,26,26,26,,,,,,,336,,379',
',26,,,753,754,35,,14,,,35,,,,,,,,,,,658,660,661,,762,208,,,,,,,767,768',
'35,282,282,,13,,,717,,,13,,13,,26,26,,,,,,35,,26,,26,,,,,26,,324,339',
'339,339,747,,,14,,,,,,14,,14,,,,,591,,,,809,,,,,,,,,,,,26,26,35,,,,',
',,,35,,,,,,,,,26,,,,,,783,826,,,,,,,,26,615,,,833,,,624,,625,,,,,,628',
',,,,,,,,,,,,,,,,,,,,649,861,862,,,864,,,,810,,,,,,,,,,,,,,26,,35,35',
',,,,,,,,,,,,,,,887,,,,,,35,,,,,,,,,,,,,,,704,,,,,,,,,26,,,,,,,816,818',
'819,,,26,,,863,,,,,,,,,,,,,26,,,,,,,,35,934,,,282,35,,935,,845,846,',
',848,850,,852,282,,751,,,,,,,,,,26,,,26,,,,,,26,,758,,,,,,,,26,,,26',
',,26,,,,,,,,,,,863,,,606,,,788,,,,,,,,,,,,,,26,26,,,,26,,,,,,,,,,,,',
',,,26,911,912,914,916,,917,,,,,,,,,,,,,26,26,,927,929,930,931,,,,,,',
',,,,,,,,,26,,,,830,,,,26,26,,,,,,,,,,,,842,,,,950,952,953,954,,,,,955',
',,853,,,,,,,,957,,26,,282,,,26,,,,,26,282,869,,,,,,,,26,,,,,,,,,,26',
',,,,,,,,,,,,,,,,,,,,,,,,,,35,26,,35,,,,,,,,,,26,,,,,,,,,,,,35,,,,,,',
',,,,,,,,,,,,26,,26,26,,,26,,,,,,26,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,26',
',,,,,,,,35,35,,,282,,,,,,,,,214,,282,,247,247,247,,,35,,,,,,,,35,35',
',299,300,301,,,,,,,,,,26,,,247,247,,,,,,,,,26,,,,,,26,,26,,,,,,,35,',
',,,35,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,',
',35,,,,835,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35,,,35,,,,,,35,,,,,,,,,378',
'247,386,247,,,403,,,,,339,,,,,,,,,214,,35,417,418,419,420,421,422,423',
'424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440',
'441,442,,,,,,,,,247,,247,,,,,247,,,,,,247,247,,,,,,,,247,,,,,,,,,,35',
',,,,,35,,35,,,,,,,,,,488,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,247,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',247,,403,598,386,,,,,,,,,,,,,,,,,,,,,,,,,,,,,247,,247,,247,,,,,,,,',
',,,616,,,,,,,,,,,,247,,,,,,,,,,638,639,640,,,,,,247,,,,247,,,247,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,247,247,,,,,,,,,,247,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,716,,247,719,,,723,725,,,,728,,,730,,,,,,,,,,,,,,,,,247',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,247,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,247,,812,,,,,,,,,,,723',
'725,728,,814,,,,,,,,,,,247,,,247,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,247,,,,,,,,,,,,,,,,,812,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,247,,,247,,,247' ]
        racc_goto_table = arr = ::Array.new(2686, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'49,49,19,113,14,3,15,58,48,14,42,57,28,28,28,60,60,17,26,4,88,84,17',
'8,24,64,20,64,44,24,24,81,81,24,14,149,32,32,122,63,63,64,26,82,61,61',
'43,17,5,87,59,59,83,83,59,14,110,111,38,49,33,33,33,144,11,11,14,34',
'17,19,117,52,52,22,22,115,24,24,24,24,46,8,145,35,106,139,149,139,139',
'13,13,53,53,13,118,1,39,107,104,32,32,9,35,35,14,62,146,87,62,135,55',
'55,14,111,135,111,6,17,47,47,10,12,16,25,36,17,54,56,65,66,68,69,76',
'77,78,80,13,13,13,13,85,55,55,55,86,89,90,91,92,58,58,93,30,30,30,94',
'95,96,97,98,99,100,101,102,103,108,107,116,119,120,121,123,115,124,24',
'24,24,24,126,127,128,129,130,15,15,15,133,134,28,15,136,113,137,138',
'49,140,9,14,14,146,141,142,143,,9,,44,,107,,17,17,,104,,44,19,61,,,14',
'144,,,,115,122,,,,,84,,17,106,5,20,,,,113,,107,,,,,32,32,,,,,105,35',
'28,28,144,117,,,,,,28,,,145,20,,110,111,42,111,,,,19,,,14,,118,,,14',
',,26,113,46,24,24,17,43,,,139,17,,111,,82,,38,,61,,61,38,24,32,115,18',
',,,,18,,,83,,32,20,24,64,,,64,,18,,20,149,18,18,18,88,19,,8,39,18,18',
'18,,39,21,19,,13,13,21,,,,,,55,,44,,49,18,18,111,87,,22,18,18,55,32',
'18,18,18,18,21,21,21,32,,87,,,,34,26,113,,34,,59,63,,30,,81,21,,,28',
'105,30,49,105,60,63,61,21,21,21,18,61,,,18,18,18,18,18,5,60,122,33,',
'11,61,,33,,,24,52,,,,,,,,,26,,58,,,21,57,42,,,,53,,21,60,,42,,24,64',
'28,,64,,,,49,61,,,61,,,,81,,,,49,,,,,33,,58,33,,,61,,,,,,,,,,,,61,3',
'18,18,18,18,18,18,,,18,18,18,18,18,,24,105,,105,,28,,,,18,14,49,,14',
',28,,49,,,,21,21,17,,,17,,,,55,,,,61,14,2,,113,55,,20,61,84,21,,,49',
'17,,15,15,,81,,15,87,87,18,18,13,,,,,,2,18,,18,,105,105,18,18,87,87',
',26,,57,,,4,57,42,18,14,,,,,,,,63,42,63,,63,17,,,,21,,14,14,21,21,26',
'11,18,18,105,,105,,52,17,17,21,,,,,48,,14,3,61,18,,61,3,,14,14,53,,',
'17,24,,,,18,,105,17,17,,,,,,,,,,,,,,,109,26,,,,,,19,23,,26,,49,,14,58',
',,58,14,55,,,15,,63,60,17,,14,,55,17,,,,,13,,,18,32,17,,,,,,,,,,,,,',
',87,109,,,109,,87,2,2,,14,,,,,3,,,,,,24,14,17,,,14,,,,2,,18,,,17,,,',
',,,18,,18,,,,,,,18,,,,14,14,,,14,18,,,,,14,,,17,17,,,17,,,,,21,17,,',
'13,,,,,21,,,,2,,23,23,,2,14,18,,,18,55,,87,,60,18,,,17,,,,,,,18,,,18',
',3,18,,,,,,,,,,21,,,21,28,,,,,,49,,,,,,,23,,23,,18,18,,23,21,18,109',
'55,,109,14,,61,21,,,14,49,14,,,18,,17,,,,,26,17,,17,,109,,,109,,109',
',18,18,,,18,,,,,,,,,,,18,21,,,,,,18,,37,,,,,37,18,18,,,,21,21,,,21,',
',37,,,,37,37,37,,21,,,,37,,,21,,109,,,109,,109,21,21,,18,,,,,18,,37',
'37,109,18,,,37,37,,23,37,,,18,,,,,,,,,,18,,109,,,,,,,,21,,,,,21,,,,',
',,,,,21,37,40,18,,37,37,37,37,37,,,,,,18,,,,18,,,,,2,,23,2,23,,23,,',
',,,,,21,,,,23,,,,18,,18,18,21,,18,,21,,,,18,,,,,,,,,,,,,40,23,,40,,23',
',18,23,,,,21,21,,,21,,18,,,,21,37,37,37,37,37,37,,2,37,37,37,37,37,',
',,,,,21,,23,,37,,,2,2,45,,21,,,45,,,,,,,,,,,112,112,112,,2,18,,,,,,',
'2,2,45,45,45,,18,,,23,,,18,,18,,37,37,,,,,,45,,37,,37,,,,,37,,45,45',
'45,45,23,,,21,,,,,,21,,21,,,,,40,,,,2,,,,,,,,,,,,37,37,45,,,,,,,,45',
',,,,,,,,37,,,,,,23,2,,,,,,,,37,40,,,2,,,40,,40,,,,,,40,,,,,,,,,,,,,',
',,,,,,,40,2,2,,,2,,,,23,,,,,,,,,,,,,,37,,45,45,,,,,,,,,,,,,,,,2,,,,',
',45,,,,,,,,,,,,,,,40,,,,,,,,,37,,,,,,,112,112,112,,,37,,,23,,,,,,,,',
',,,,37,,,,,,,,45,2,,,45,45,,2,,112,112,,,112,112,,112,45,,40,,,,,,,',
',,37,,,37,,,,,,37,,40,,,,,,,,37,,,37,,,37,,,,,,,,,,,23,,,23,,,40,,,',
',,,,,,,,,,37,37,,,,37,,,,,,,,,,,,,,,,37,112,112,112,112,,112,,,,,,,',
',,,,,37,37,,112,112,112,112,,,,,,,,,,,,,,,,37,,,,40,,,,37,37,,,,,,,',
',,,,40,,,,112,112,112,112,,,,,112,,,40,,,,,,,,112,,37,,45,,,37,,,,,37',
'45,40,,,,,,,,37,,,,,,,,,,37,,,,,,,,,,,,,,,,,,,,,,,,,,,45,37,,45,,,,',
',,,,,37,,,,,,,,,,,,45,,,,,,,,,,,,,,,,,,,37,,37,37,,,37,,,,,,37,,,,,',
',,,,,,,,,,,,,,,45,,,,,,,,,,37,,,,,,,,,45,45,,,45,,,,,,,,,27,,45,,27',
'27,27,,,45,,,,,,,,45,45,,27,27,27,,,,,,,,,,37,,,27,27,,,,,,,,,37,,,',
',,37,,37,,,,,,,45,,,,,45,,,,,,,,,,45,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,45,,,,,,,,,,,,45,,,,45,,,,,,,,,,,,,,,,,,,,,,,,,,,,,45,45,,,45',
',,,,,45,,,,,,,,,27,27,27,27,,,27,,,,,45,,,,,,,,,27,,45,27,27,27,27,27',
'27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,,,,,',
',,,27,,27,,,,,27,,,,,,27,27,,,,,,,,27,,,,,,,,,,45,,,,,,45,,45,,,,,,',
',,,27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,27,27,27,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,27,,27,,27,,,,,,,,,,,,27,,,,,,,,,,,,27,,,,,,,',
',,27,27,27,,,,,,27,,,,27,,,27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,27',
'27,,,,,,,,,,27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,27,27,,,27,27,,,,27',
',,27,,,,,,,,,,,,,,,,,27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'27,,27,,,,,,,,,,,27,27,27,,27,,,,,,,,,,,27,,,27,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,,,,,,,,,,,,,,27,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,27,,,27' ]
        racc_goto_check = arr = ::Array.new(2686, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,    95,   556,   -46,  -284,  -442,  -526,   nil,    20,    96,
   117,    58,   114,    32,     4,   -12,    60,    17,   313,  -196,
  -361,   348,  -122,   639,   -28,    13,     1,  1797,   -10,   nil,
   130,   nil,  -163,    34,  -197,  -360,  -332,   959,    28,    66,
   855,   nil,   -21,    14,  -265,  1180,  -253,    55,   -57,    -6,
   nil,   nil,    65,    85,  -247,    79,    74,   -42,   -46,  -257,
   -38,    18,  -347,  -210,  -420,  -333,  -137,   nil,  -331,  -490,
   nil,   nil,   nil,   nil,   nil,   nil,    67,    79,    79,   nil,
    79,  -286,  -632,  -478,  -301,    78,  -193,    46,  -532,    80,
  -205,  -158,    89,  -527,    95,  -525,  -382,  -707,  -387,  -538,
  -179,  -188,  -390,  -644,  -687,  -264,  -433,  -690,  -436,    84,
  -545,  -544,   691,  -312,   nil,  -429,  -488,  -585,  -561,  -147,
  -333,   114,  -277,   151,   -71,   nil,   -91,   -91,  -684,  -310,
  -464,   nil,   nil,   115,   114,    33,   113,   114,  -165,  -270,
   116,  -360,  -360,  -455,  -594,  -577,  -711,   nil,   nil,  -412 ]

racc_goto_default = [
   nil,   nil,   303,   nil,   nil,   790,   nil,     3,   nil,     4,
   323,   nil,   nil,   nil,   212,    16,    11,   213,   298,   nil,
   nil,   211,   nil,   253,    15,   nil,   409,    19,    20,    21,
   388,    25,   635,   nil,   nil,   nil,   nil,   288,    29,   nil,
   nil,    31,    34,    33,   nil,   209,   334,   nil,   117,   394,
   116,   119,    69,    70,   nil,    42,   nil,   643,   249,   nil,
   250,   399,   586,   nil,   251,   nil,   nil,   266,   nil,   nil,
    43,    44,    45,    46,    47,    48,    49,   nil,   267,    55,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   527,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   668,   516,   nil,   669,   nil,   505,
   nil,   507,   nil,   777,   600,   nil,   nil,   nil,   513,   nil,
   nil,   nil,   702,   nil,   nil,   398,   nil,   nil,   nil,   nil,
   nil,    68,    71,    72,   nil,   nil,   nil,   nil,   nil,   563,
   nil,   nil,   nil,   506,   518,   519,   743,   522,   525,   258 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 138, :_reduce_none,
  4, 140, :_reduce_2,
  2, 139, :_reduce_3,
  0, 144, :_reduce_4,
  1, 144, :_reduce_5,
  3, 144, :_reduce_6,
  2, 144, :_reduce_7,
  0, 162, :_reduce_8,
  4, 146, :_reduce_9,
  3, 146, :_reduce_10,
  3, 146, :_reduce_11,
  3, 146, :_reduce_12,
  2, 146, :_reduce_13,
  3, 146, :_reduce_14,
  3, 146, :_reduce_15,
  3, 146, :_reduce_16,
  3, 146, :_reduce_17,
  3, 146, :_reduce_18,
  4, 146, :_reduce_19,
  4, 146, :_reduce_20,
  3, 146, :_reduce_21,
  3, 146, :_reduce_22,
  3, 146, :_reduce_23,
  6, 146, :_reduce_24,
  5, 146, :_reduce_25,
  5, 146, :_reduce_26,
  5, 146, :_reduce_27,
  3, 146, :_reduce_28,
  3, 146, :_reduce_29,
  3, 146, :_reduce_30,
  3, 146, :_reduce_31,
  1, 146, :_reduce_none,
  1, 161, :_reduce_none,
  3, 161, :_reduce_34,
  3, 161, :_reduce_35,
  3, 161, :_reduce_36,
  2, 161, :_reduce_37,
  1, 161, :_reduce_none,
  1, 150, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  2, 152, :_reduce_42,
  2, 152, :_reduce_43,
  2, 152, :_reduce_44,
  1, 166, :_reduce_none,
  4, 166, :_reduce_46,
  4, 166, :_reduce_47,
  0, 173, :_reduce_48,
  5, 171, :_reduce_49,
  2, 165, :_reduce_50,
  3, 165, :_reduce_51,
  4, 165, :_reduce_52,
  5, 165, :_reduce_53,
  4, 165, :_reduce_54,
  5, 165, :_reduce_55,
  2, 165, :_reduce_56,
  2, 165, :_reduce_57,
  1, 153, :_reduce_58,
  3, 153, :_reduce_59,
  1, 176, :_reduce_60,
  3, 176, :_reduce_61,
  1, 175, :_reduce_none,
  2, 175, :_reduce_63,
  3, 175, :_reduce_64,
  5, 175, :_reduce_65,
  2, 175, :_reduce_66,
  4, 175, :_reduce_67,
  2, 175, :_reduce_68,
  4, 175, :_reduce_69,
  1, 175, :_reduce_70,
  3, 175, :_reduce_71,
  1, 179, :_reduce_none,
  3, 179, :_reduce_73,
  2, 178, :_reduce_74,
  3, 178, :_reduce_75,
  1, 181, :_reduce_76,
  3, 181, :_reduce_77,
  1, 180, :_reduce_78,
  4, 180, :_reduce_79,
  3, 180, :_reduce_80,
  3, 180, :_reduce_81,
  3, 180, :_reduce_82,
  3, 180, :_reduce_83,
  2, 180, :_reduce_84,
  1, 180, :_reduce_85,
  1, 151, :_reduce_86,
  4, 151, :_reduce_87,
  3, 151, :_reduce_88,
  3, 151, :_reduce_89,
  3, 151, :_reduce_90,
  3, 151, :_reduce_91,
  2, 151, :_reduce_92,
  1, 151, :_reduce_93,
  1, 183, :_reduce_94,
  1, 183, :_reduce_none,
  2, 184, :_reduce_96,
  1, 184, :_reduce_97,
  3, 184, :_reduce_98,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 188, :_reduce_104,
  1, 188, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 149, :_reduce_108,
  0, 191, :_reduce_109,
  4, 149, :_reduce_110,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  3, 164, :_reduce_181,
  5, 164, :_reduce_182,
  3, 164, :_reduce_183,
  5, 164, :_reduce_184,
  6, 164, :_reduce_185,
  5, 164, :_reduce_186,
  5, 164, :_reduce_187,
  5, 164, :_reduce_188,
  5, 164, :_reduce_189,
  4, 164, :_reduce_190,
  3, 164, :_reduce_191,
  3, 164, :_reduce_192,
  3, 164, :_reduce_193,
  3, 164, :_reduce_194,
  3, 164, :_reduce_195,
  3, 164, :_reduce_196,
  3, 164, :_reduce_197,
  3, 164, :_reduce_198,
  3, 164, :_reduce_199,
  4, 164, :_reduce_200,
  4, 164, :_reduce_201,
  2, 164, :_reduce_202,
  2, 164, :_reduce_203,
  3, 164, :_reduce_204,
  3, 164, :_reduce_205,
  3, 164, :_reduce_206,
  3, 164, :_reduce_207,
  3, 164, :_reduce_208,
  3, 164, :_reduce_209,
  3, 164, :_reduce_210,
  3, 164, :_reduce_211,
  3, 164, :_reduce_212,
  3, 164, :_reduce_213,
  3, 164, :_reduce_214,
  3, 164, :_reduce_215,
  3, 164, :_reduce_216,
  2, 164, :_reduce_217,
  2, 164, :_reduce_218,
  3, 164, :_reduce_219,
  3, 164, :_reduce_220,
  3, 164, :_reduce_221,
  3, 164, :_reduce_222,
  3, 164, :_reduce_223,
  6, 164, :_reduce_224,
  1, 164, :_reduce_none,
  1, 160, :_reduce_none,
  1, 193, :_reduce_none,
  2, 193, :_reduce_none,
  4, 193, :_reduce_229,
  2, 193, :_reduce_230,
  3, 198, :_reduce_231,
  0, 199, :_reduce_232,
  1, 199, :_reduce_none,
  0, 156, :_reduce_234,
  1, 156, :_reduce_none,
  1, 167, :_reduce_236,
  2, 167, :_reduce_237,
  2, 167, :_reduce_238,
  4, 167, :_reduce_239,
  6, 167, :_reduce_240,
  1, 167, :_reduce_241,
  4, 202, :_reduce_242,
  3, 202, :_reduce_243,
  2, 202, :_reduce_244,
  4, 202, :_reduce_245,
  6, 202, :_reduce_246,
  1, 202, :_reduce_247,
  0, 204, :_reduce_248,
  2, 170, :_reduce_249,
  1, 203, :_reduce_250,
  0, 205, :_reduce_251,
  3, 203, :_reduce_252,
  0, 206, :_reduce_253,
  4, 203, :_reduce_254,
  2, 201, :_reduce_255,
  2, 200, :_reduce_256,
  1, 200, :_reduce_257,
  0, 200, :_reduce_258,
  1, 195, :_reduce_259,
  2, 195, :_reduce_260,
  3, 195, :_reduce_261,
  4, 195, :_reduce_262,
  3, 159, :_reduce_263,
  4, 159, :_reduce_264,
  2, 159, :_reduce_265,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_274,
  3, 192, :_reduce_275,
  0, 228, :_reduce_276,
  4, 192, :_reduce_277,
  3, 192, :_reduce_278,
  3, 192, :_reduce_279,
  2, 192, :_reduce_280,
  3, 192, :_reduce_281,
  3, 192, :_reduce_282,
  1, 192, :_reduce_283,
  4, 192, :_reduce_284,
  3, 192, :_reduce_285,
  1, 192, :_reduce_286,
  5, 192, :_reduce_287,
  4, 192, :_reduce_288,
  3, 192, :_reduce_289,
  2, 192, :_reduce_290,
  1, 192, :_reduce_none,
  2, 192, :_reduce_292,
  2, 192, :_reduce_293,
  6, 192, :_reduce_294,
  6, 192, :_reduce_295,
  0, 229, :_reduce_296,
  0, 230, :_reduce_297,
  7, 192, :_reduce_298,
  0, 231, :_reduce_299,
  0, 232, :_reduce_300,
  7, 192, :_reduce_301,
  5, 192, :_reduce_302,
  4, 192, :_reduce_303,
  0, 233, :_reduce_304,
  0, 234, :_reduce_305,
  9, 192, :_reduce_306,
  0, 235, :_reduce_307,
  6, 192, :_reduce_308,
  0, 236, :_reduce_309,
  7, 192, :_reduce_310,
  0, 237, :_reduce_311,
  5, 192, :_reduce_312,
  0, 238, :_reduce_313,
  6, 192, :_reduce_314,
  0, 239, :_reduce_315,
  0, 240, :_reduce_316,
  9, 192, :_reduce_317,
  1, 192, :_reduce_318,
  1, 192, :_reduce_319,
  1, 192, :_reduce_320,
  1, 192, :_reduce_321,
  1, 155, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  2, 218, :_reduce_325,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 219, :_reduce_none,
  5, 219, :_reduce_329,
  1, 142, :_reduce_none,
  2, 142, :_reduce_331,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 241, :_reduce_none,
  3, 241, :_reduce_335,
  1, 244, :_reduce_336,
  3, 244, :_reduce_337,
  1, 243, :_reduce_none,
  4, 243, :_reduce_339,
  6, 243, :_reduce_340,
  3, 243, :_reduce_341,
  5, 243, :_reduce_342,
  2, 243, :_reduce_343,
  4, 243, :_reduce_344,
  1, 243, :_reduce_345,
  3, 243, :_reduce_346,
  6, 245, :_reduce_347,
  8, 245, :_reduce_348,
  4, 245, :_reduce_349,
  6, 245, :_reduce_350,
  4, 245, :_reduce_351,
  2, 245, :_reduce_none,
  6, 245, :_reduce_353,
  2, 245, :_reduce_354,
  4, 245, :_reduce_355,
  6, 245, :_reduce_356,
  2, 245, :_reduce_357,
  4, 245, :_reduce_358,
  2, 245, :_reduce_359,
  4, 245, :_reduce_360,
  1, 245, :_reduce_361,
  0, 172, :_reduce_362,
  1, 172, :_reduce_363,
  3, 251, :_reduce_364,
  1, 251, :_reduce_365,
  4, 251, :_reduce_366,
  0, 252, :_reduce_367,
  2, 252, :_reduce_368,
  1, 253, :_reduce_369,
  3, 253, :_reduce_370,
  1, 254, :_reduce_371,
  1, 254, :_reduce_none,
  0, 258, :_reduce_373,
  3, 217, :_reduce_374,
  4, 256, :_reduce_375,
  2, 256, :_reduce_376,
  3, 257, :_reduce_377,
  3, 257, :_reduce_378,
  0, 261, :_reduce_379,
  5, 260, :_reduce_380,
  2, 168, :_reduce_381,
  4, 168, :_reduce_382,
  4, 168, :_reduce_383,
  2, 216, :_reduce_384,
  4, 216, :_reduce_385,
  4, 216, :_reduce_386,
  3, 216, :_reduce_387,
  3, 216, :_reduce_388,
  3, 216, :_reduce_389,
  2, 216, :_reduce_390,
  1, 216, :_reduce_391,
  4, 216, :_reduce_392,
  0, 263, :_reduce_393,
  5, 215, :_reduce_394,
  0, 264, :_reduce_395,
  5, 215, :_reduce_396,
  5, 221, :_reduce_397,
  1, 265, :_reduce_398,
  1, 265, :_reduce_none,
  6, 141, :_reduce_400,
  0, 141, :_reduce_401,
  1, 266, :_reduce_402,
  1, 266, :_reduce_none,
  1, 266, :_reduce_none,
  2, 267, :_reduce_405,
  1, 267, :_reduce_none,
  2, 143, :_reduce_407,
  1, 143, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 208, :_reduce_412,
  1, 269, :_reduce_413,
  2, 269, :_reduce_414,
  3, 270, :_reduce_415,
  1, 270, :_reduce_416,
  1, 270, :_reduce_417,
  3, 209, :_reduce_418,
  4, 210, :_reduce_419,
  3, 211, :_reduce_420,
  0, 274, :_reduce_421,
  3, 274, :_reduce_422,
  1, 275, :_reduce_423,
  2, 275, :_reduce_424,
  3, 212, :_reduce_425,
  0, 277, :_reduce_426,
  3, 277, :_reduce_427,
  0, 271, :_reduce_428,
  2, 271, :_reduce_429,
  0, 272, :_reduce_430,
  2, 272, :_reduce_431,
  0, 273, :_reduce_432,
  2, 273, :_reduce_433,
  1, 276, :_reduce_434,
  2, 276, :_reduce_435,
  0, 279, :_reduce_436,
  4, 276, :_reduce_437,
  1, 278, :_reduce_438,
  1, 278, :_reduce_439,
  1, 278, :_reduce_440,
  1, 278, :_reduce_none,
  1, 189, :_reduce_442,
  3, 190, :_reduce_443,
  1, 268, :_reduce_444,
  1, 268, :_reduce_445,
  2, 268, :_reduce_446,
  2, 268, :_reduce_447,
  1, 182, :_reduce_448,
  1, 182, :_reduce_449,
  1, 182, :_reduce_450,
  1, 182, :_reduce_451,
  1, 182, :_reduce_452,
  1, 182, :_reduce_453,
  1, 182, :_reduce_454,
  1, 182, :_reduce_455,
  1, 182, :_reduce_456,
  1, 182, :_reduce_457,
  1, 182, :_reduce_458,
  1, 182, :_reduce_459,
  1, 213, :_reduce_460,
  1, 154, :_reduce_461,
  1, 158, :_reduce_462,
  1, 158, :_reduce_463,
  1, 223, :_reduce_464,
  3, 223, :_reduce_465,
  2, 223, :_reduce_466,
  3, 225, :_reduce_467,
  2, 225, :_reduce_468,
  6, 259, :_reduce_469,
  8, 259, :_reduce_470,
  4, 259, :_reduce_471,
  6, 259, :_reduce_472,
  4, 259, :_reduce_473,
  6, 259, :_reduce_474,
  2, 259, :_reduce_475,
  4, 259, :_reduce_476,
  6, 259, :_reduce_477,
  2, 259, :_reduce_478,
  4, 259, :_reduce_479,
  2, 259, :_reduce_480,
  4, 259, :_reduce_481,
  1, 259, :_reduce_482,
  0, 259, :_reduce_483,
  1, 255, :_reduce_484,
  1, 255, :_reduce_485,
  1, 255, :_reduce_486,
  1, 255, :_reduce_487,
  1, 242, :_reduce_none,
  1, 242, :_reduce_489,
  3, 242, :_reduce_490,
  2, 242, :_reduce_491,
  1, 281, :_reduce_none,
  3, 281, :_reduce_493,
  1, 246, :_reduce_494,
  3, 246, :_reduce_495,
  3, 282, :_reduce_496,
  3, 283, :_reduce_497,
  1, 247, :_reduce_498,
  3, 247, :_reduce_499,
  1, 280, :_reduce_500,
  3, 280, :_reduce_501,
  1, 284, :_reduce_none,
  1, 284, :_reduce_none,
  2, 248, :_reduce_504,
  1, 248, :_reduce_505,
  1, 285, :_reduce_none,
  1, 285, :_reduce_none,
  2, 250, :_reduce_508,
  2, 249, :_reduce_509,
  0, 249, :_reduce_510,
  1, 226, :_reduce_none,
  3, 226, :_reduce_512,
  0, 214, :_reduce_513,
  2, 214, :_reduce_none,
  1, 197, :_reduce_515,
  3, 197, :_reduce_516,
  3, 286, :_reduce_517,
  2, 286, :_reduce_518,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 262, :_reduce_none,
  1, 262, :_reduce_none,
  1, 262, :_reduce_none,
  1, 227, :_reduce_none,
  1, 227, :_reduce_none,
  0, 145, :_reduce_none,
  1, 145, :_reduce_none,
  0, 163, :_reduce_none,
  1, 163, :_reduce_none,
  2, 177, :_reduce_535,
  2, 157, :_reduce_536,
  0, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 196, :_reduce_none,
  1, 224, :_reduce_540,
  1, 224, :_reduce_none,
  1, 147, :_reduce_none,
  2, 147, :_reduce_none,
  0, 194, :_reduce_544 ]

racc_reduce_n = 545

racc_shift_n = 958

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUMINUS_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tPLUS => 104,
  :tMINUS => 105,
  :tLT => 106,
  :tGT => 107,
  :tPIPE => 108,
  :tBANG => 109,
  :tCARET => 110,
  :tLCURLY => 111,
  :tRCURLY => 112,
  :tBACK_REF2 => 113,
  :tSYMBEG => 114,
  :tSTRING_BEG => 115,
  :tXSTRING_BEG => 116,
  :tREGEXP_BEG => 117,
  :tREGEXP_OPT => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tCHARACTER => 134,
  :tEQL => 135,
  :tLOWEST => 136 }

racc_nt_base = 137

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "compstmt",
  "bodystmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "opt_terms",
  "stmt",
  "terms",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@1",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "@2",
  "operation",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@3",
  "primary",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "call_args2",
  "open_args",
  "@4",
  "@5",
  "@6",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@20",
  "f_args",
  "do_block",
  "@21",
  "operation3",
  "@22",
  "@23",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@24",
  "f_optarg",
  "f_arg_item",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

def _reduce_2(val, _values, result)
                      rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_.nil?
                        diagnostic :warning, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
end

def _reduce_3(val, _values, result)
                      result = @builder.compstmt(val[0])
                    
    result
end

def _reduce_4(val, _values, result)
                      result = []
                    
    result
end

def _reduce_5(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_6(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_7(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_8(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_9(val, _values, result)
                      result = @builder.alias(val[0], val[1], val[3])
                    
    result
end

def _reduce_10(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
end

def _reduce_11(val, _values, result)
                      result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
end

def _reduce_12(val, _values, result)
                      diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
end

def _reduce_13(val, _values, result)
                      result = @builder.undef_method(val[0], val[1])
                    
    result
end

def _reduce_14(val, _values, result)
                      result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
end

def _reduce_15(val, _values, result)
                      result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
end

def _reduce_16(val, _values, result)
                      result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
end

def _reduce_17(val, _values, result)
                      result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
end

def _reduce_18(val, _values, result)
                      rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
end

def _reduce_19(val, _values, result)
                      if in_def?
                        diagnostic :error, :begin_in_method, nil, val[0]
                      end

                      result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_20(val, _values, result)
                      result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_21(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_22(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_23(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_25(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_26(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_28(val, _values, result)
                      @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_29(val, _values, result)
                      result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

def _reduce_30(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_31(val, _values, result)
                      result = @builder.multi_assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
end

# reduce 32 omitted

# reduce 33 omitted

def _reduce_34(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_35(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_36(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
end

def _reduce_37(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

def _reduce_42(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_43(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
end

def _reduce_44(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
end

# reduce 45 omitted

def _reduce_46(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
end

def _reduce_47(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
end

def _reduce_48(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_49(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
end

def _reduce_50(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0],
                                  *val[1])
                    
    result
end

def _reduce_51(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0],
                                        *val[1])

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_52(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
end

def _reduce_53(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        *val[3])

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_54(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
end

def _reduce_55(val, _values, result)
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                        *val[3])

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_56(val, _values, result)
                      result = @builder.keyword_cmd(:super, val[0],
                                  *val[1])
                    
    result
end

def _reduce_57(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0],
                                  *val[1])
                    
    result
end

def _reduce_58(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_59(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_60(val, _values, result)
                      result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
end

def _reduce_61(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

# reduce 62 omitted

def _reduce_63(val, _values, result)
                      result = val[0].
                                  push(val[1])
                    
    result
end

def _reduce_64(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
end

def _reduce_65(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_66(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
end

def _reduce_67(val, _values, result)
                      result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
end

def _reduce_68(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_69(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_70(val, _values, result)
                      result = [ @builder.splat(val[0]) ]
                    
    result
end

def _reduce_71(val, _values, result)
                      result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
end

# reduce 72 omitted

def _reduce_73(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_75(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_76(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_77(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_78(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_79(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_80(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_81(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_82(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_83(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_84(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_85(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_87(val, _values, result)
                      result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_88(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_90(val, _values, result)
                      result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
end

def _reduce_91(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
end

def _reduce_92(val, _values, result)
                      result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
end

def _reduce_93(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_94(val, _values, result)
                      diagnostic :error, :module_name_const, nil, val[0]
                    
    result
end

# reduce 95 omitted

def _reduce_96(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_97(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_98(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

def _reduce_104(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

def _reduce_108(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_109(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_110(val, _values, result)
                      result = val[0] << val[3]
                    
    result
end

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

def _reduce_181(val, _values, result)
                      result = @builder.assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_182(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result  = @builder.assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_183(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_184(val, _values, result)
                      rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.op_assign(val[0], val[1], rescue_)
                    
    result
end

def _reduce_185(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
end

def _reduce_186(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_187(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_188(val, _values, result)
                      result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
end

def _reduce_189(val, _values, result)
                      diagnostic :error, :dynamic_const, nil, val[2], [ val[3] ]
                    
    result
end

def _reduce_190(val, _values, result)
                      diagnostic :error, :dynamic_const, nil, val[1], [ val[2] ]
                    
    result
end

def _reduce_191(val, _values, result)
                      result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
end

def _reduce_192(val, _values, result)
                      result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_193(val, _values, result)
                      result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
end

def _reduce_194(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_195(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_196(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_197(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_198(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.integer(val[1]),
                                      val[2], val[3]))
                    
    result
end

def _reduce_201(val, _values, result)
                      result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.float(val[1]),
                                      val[2], val[3]))
                    
    result
end

def _reduce_202(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_206(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_208(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = @builder.match_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_217(val, _values, result)
                      result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
end

def _reduce_218(val, _values, result)
                      result = @builder.unary_op(val[0], val[1])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
end

def _reduce_224(val, _values, result)
                      result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
end

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

def _reduce_229(val, _values, result)
                      result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
end

def _reduce_230(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
end

def _reduce_231(val, _values, result)
                      result = val
                    
    result
end

def _reduce_232(val, _values, result)
                      result = [ nil, [], nil ]
                    
    result
end

# reduce 233 omitted

def _reduce_234(val, _values, result)
                      result = []
                    
    result
end

# reduce 235 omitted

def _reduce_236(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_237(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_238(val, _values, result)
                      result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
end

def _reduce_239(val, _values, result)
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
end

def _reduce_240(val, _values, result)
                      val[2][-1] = @builder.objc_varargs(val[2][-1], val[4])
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[5])
                    
    result
end

def _reduce_241(val, _values, result)
                      result =  [ val[0] ]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = [ val[0], *val[2].concat(val[3]) ]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = [ val[0], val[2] ]
                    
    result
end

def _reduce_244(val, _values, result)
                      result =  [ @builder.associate(nil, val[0], nil),
                                  *val[1] ]
                    
    result
end

def _reduce_245(val, _values, result)
                      result =  [ val[0],
                                  @builder.associate(nil, val[2], nil),
                                  *val[3] ]
                    
    result
end

def _reduce_246(val, _values, result)
                      result =  [ val[0],
                                  *val[2].
                                    push(@builder.associate(nil, val[4], nil)).
                                    concat(val[5]) ]
                    
    result
end

def _reduce_247(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = @lexer.cmdarg.dup
                      @lexer.cmdarg.push(true)
                    
    result
end

def _reduce_249(val, _values, result)
                      @lexer.cmdarg = val[0]

                      result = val[1]
                    
    result
end

def _reduce_250(val, _values, result)
                      result = [ nil, val[0], nil ]
                    
    result
end

def _reduce_251(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_252(val, _values, result)
                      result = [ val[0], [], val[2] ]
                    
    result
end

def _reduce_253(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_254(val, _values, result)
                      result = [ val[0], val[1], val[3] ]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = @builder.block_pass(val[0], val[1])
                    
    result
end

def _reduce_256(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_257(val, _values, result)
                      result = []
                    
    result
end

def _reduce_258(val, _values, result)
                      result = []
                    
    result
end

def _reduce_259(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_260(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

def _reduce_261(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = val[0] << @builder.splat(val[2], val[3])
                    
    result
end

def _reduce_265(val, _values, result)
                      result = [ @builder.splat(val[0], val[1]) ]
                    
    result
end

# reduce 266 omitted

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

def _reduce_274(val, _values, result)
                      result = @builder.call_method(nil, nil, val[0])
                    
    result
end

def _reduce_275(val, _values, result)
                      result = @builder.begin_keyword(val[0], val[1], val[2])
                    
    result
end

def _reduce_276(val, _values, result)
                      @lexer.state = :expr_endarg
                    
    result
end

def _reduce_277(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[3])
                    
    result
end

def _reduce_278(val, _values, result)
                      result = @builder.begin(val[0], val[1], val[2])
                    
    result
end

def _reduce_279(val, _values, result)
                      result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
end

def _reduce_280(val, _values, result)
                      result = @builder.const_global(val[0], val[1])
                    
    result
end

def _reduce_281(val, _values, result)
                      result = @builder.array(val[0], val[1], val[2])
                    
    result
end

def _reduce_282(val, _values, result)
                      result = @builder.associate(val[0], val[1], val[2])
                    
    result
end

def _reduce_283(val, _values, result)
                      result = @builder.keyword_cmd(:return, val[0])
                    
    result
end

def _reduce_284(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_285(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
end

def _reduce_286(val, _values, result)
                      result = @builder.keyword_cmd(:yield, val[0])
                    
    result
end

def _reduce_287(val, _values, result)
                      result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
end

def _reduce_288(val, _values, result)
                      result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_289(val, _values, result)
                      result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
end

def _reduce_290(val, _values, result)
                      method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
end

# reduce 291 omitted

def _reduce_292(val, _values, result)
                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_293(val, _values, result)
                      lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
end

def _reduce_294(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
end

def _reduce_295(val, _values, result)
                      else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
end

def _reduce_296(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_297(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_298(val, _values, result)
                      result = @builder.loop(:while, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_299(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_300(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_301(val, _values, result)
                      result = @builder.loop(:until, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
end

def _reduce_302(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
end

def _reduce_303(val, _values, result)
                      *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
end

def _reduce_304(val, _values, result)
                      @lexer.cond.push(true)
                    
    result
end

def _reduce_305(val, _values, result)
                      @lexer.cond.pop
                    
    result
end

def _reduce_306(val, _values, result)
                      result = @builder.for(val[0], val[1],
                                            val[2], val[4],
                                            val[5], val[7], val[8])
                    
    result
end

def _reduce_307(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
end

def _reduce_308(val, _values, result)
                      if in_def?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                    
    result
end

def _reduce_309(val, _values, result)
                      result = @def_level
                      @def_level = 0

                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
end

def _reduce_310(val, _values, result)
                      result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.pop_cmdarg
                      @static_env.unextend

                      @def_level = val[4]
                    
    result
end

def _reduce_311(val, _values, result)
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
end

def _reduce_312(val, _values, result)
                      if in_def?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                    
    result
end

def _reduce_313(val, _values, result)
                      @def_level += 1
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
end

def _reduce_314(val, _values, result)
                      result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @def_level -= 1
                    
    result
end

def _reduce_315(val, _values, result)
                      @lexer.state = :expr_fname
                    
    result
end

def _reduce_316(val, _values, result)
                      @def_level += 1
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
end

def _reduce_317(val, _values, result)
                      result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @def_level -= 1
                    
    result
end

def _reduce_318(val, _values, result)
                      result = @builder.keyword_cmd(:break, val[0])
                    
    result
end

def _reduce_319(val, _values, result)
                      result = @builder.keyword_cmd(:next, val[0])
                    
    result
end

def _reduce_320(val, _values, result)
                      result = @builder.keyword_cmd(:redo, val[0])
                    
    result
end

def _reduce_321(val, _values, result)
                      result = @builder.keyword_cmd(:retry, val[0])
                    
    result
end

# reduce 322 omitted

# reduce 323 omitted

# reduce 324 omitted

def _reduce_325(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 326 omitted

# reduce 327 omitted

# reduce 328 omitted

def _reduce_329(val, _values, result)
                      else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
end

# reduce 330 omitted

def _reduce_331(val, _values, result)
                      result = val
                    
    result
end

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

def _reduce_335(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_336(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_337(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 338 omitted

def _reduce_339(val, _values, result)
                      result = val[0].
                                  push(@builder.objc_restarg(val[2], val[3]))
                    
    result
end

def _reduce_340(val, _values, result)
                      result = val[0].
                                  push(@builder.objc_restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
end

def _reduce_341(val, _values, result)
                      result = val[0].
                                  push(@builder.objc_restarg(val[2]))
                    
    result
end

def _reduce_342(val, _values, result)
                      result = val[0].
                                  push(@builder.objc_restarg(val[2])).
                                  concat(val[4])
                    
    result
end

def _reduce_343(val, _values, result)
                      result = [ @builder.objc_restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_344(val, _values, result)
                      result = [ @builder.objc_restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
end

def _reduce_345(val, _values, result)
                      result = [ @builder.objc_restarg(val[0]) ]
                    
    result
end

def _reduce_346(val, _values, result)
                      result = [ @builder.objc_restarg(val[0]),
                                 *val[2] ]
                    
    result
end

def _reduce_347(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_348(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_349(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_350(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_351(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

# reduce 352 omitted

def _reduce_353(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_354(val, _values, result)
                      result = val[0].concat(val[1])
                    
    result
end

def _reduce_355(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_356(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_357(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_358(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_359(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_360(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_361(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_362(val, _values, result)
                      result = @builder.args(nil, [], nil)
                    
    result
end

def _reduce_363(val, _values, result)
                      @lexer.state = :expr_value
                    
    result
end

def _reduce_364(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])
                    
    result
end

def _reduce_365(val, _values, result)
                      result = @builder.args(val[0], [], val[0])
                    
    result
end

def _reduce_366(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_367(val, _values, result)
                      result = []
                    
    result
end

def _reduce_368(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_369(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_370(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_371(val, _values, result)
                      @static_env.declare val[0][0]
                      result = @builder.shadowarg(val[0])
                    
    result
end

# reduce 372 omitted

def _reduce_373(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_374(val, _values, result)
                      result = [ val[1], val[2] ]

                      @static_env.unextend
                    
    result
end

def _reduce_375(val, _values, result)
                      result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
end

def _reduce_376(val, _values, result)
                      result = @builder.args(nil, val[0].concat(val[1]), nil)
                    
    result
end

def _reduce_377(val, _values, result)
                      result = [ val[0], val[1], val[2] ]
                    
    result
end

def _reduce_378(val, _values, result)
                      result = [ val[0], val[1], val[2] ]
                    
    result
end

def _reduce_379(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_380(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
end

def _reduce_381(val, _values, result)
                      begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
end

def _reduce_382(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_383(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_384(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_385(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_386(val, _values, result)
                      lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_387(val, _values, result)
                      result = @builder.call_method(val[0], val[1], val[2])
                    
    result
end

def _reduce_388(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_389(val, _values, result)
                      lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_390(val, _values, result)
                      lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
end

def _reduce_391(val, _values, result)
                      result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
end

def _reduce_392(val, _values, result)
                      result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
end

def _reduce_393(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_394(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
end

def _reduce_395(val, _values, result)
                      @static_env.extend_dynamic
                    
    result
end

def _reduce_396(val, _values, result)
                      result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
end

def _reduce_397(val, _values, result)
                      result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
end

def _reduce_398(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 399 omitted

def _reduce_400(val, _values, result)
                      assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
end

def _reduce_401(val, _values, result)
                      result = []
                    
    result
end

def _reduce_402(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

# reduce 403 omitted

# reduce 404 omitted

def _reduce_405(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 406 omitted

def _reduce_407(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

# reduce 408 omitted

# reduce 409 omitted

# reduce 410 omitted

# reduce 411 omitted

def _reduce_412(val, _values, result)
                      result = @builder.string_compose(nil, val[0], nil)
                    
    result
end

def _reduce_413(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_414(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_415(val, _values, result)
                      result = @builder.string_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_416(val, _values, result)
                      result = @builder.string(val[0])
                    
    result
end

def _reduce_417(val, _values, result)
                      result = @builder.character(val[0])
                    
    result
end

def _reduce_418(val, _values, result)
                      result = @builder.xstring_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_419(val, _values, result)
                      opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
end

def _reduce_420(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_421(val, _values, result)
                      result = []
                    
    result
end

def _reduce_422(val, _values, result)
                      result = val[0] << @builder.word(val[1])
                    
    result
end

def _reduce_423(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_425(val, _values, result)
                      result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_426(val, _values, result)
                      result = []
                    
    result
end

def _reduce_427(val, _values, result)
                      result = val[0] << @builder.string_internal(val[1])
                    
    result
end

def _reduce_428(val, _values, result)
                      result = []
                    
    result
end

def _reduce_429(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_430(val, _values, result)
                      result = []
                    
    result
end

def _reduce_431(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_432(val, _values, result)
                      result = []
                    
    result
end

def _reduce_433(val, _values, result)
                      result = val[0] << val[1]
                    
    result
end

def _reduce_434(val, _values, result)
                      result = @builder.string_internal(val[0])
                    
    result
end

def _reduce_435(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_436(val, _values, result)
                      @lexer.cond.push(false)
                      @lexer.cmdarg.push(false)
                    
    result
end

def _reduce_437(val, _values, result)
                      @lexer.cond.lexpop
                      @lexer.cmdarg.lexpop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
end

def _reduce_438(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_439(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_440(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

# reduce 441 omitted

def _reduce_442(val, _values, result)
                      result = @builder.symbol(val[0])
                    
    result
end

def _reduce_443(val, _values, result)
                      result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
end

def _reduce_444(val, _values, result)
                      result = @builder.integer(val[0])
                    
    result
end

def _reduce_445(val, _values, result)
                      result = @builder.float(val[0])
                    
    result
end

def _reduce_446(val, _values, result)
                      result = @builder.negate(val[0],
                                  @builder.integer(val[1]))
                    
    result
end

def _reduce_447(val, _values, result)
                      result = @builder.negate(val[0],
                                  @builder.float(val[1]))
                    
    result
end

def _reduce_448(val, _values, result)
                      result = @builder.ident(val[0])
                    
    result
end

def _reduce_449(val, _values, result)
                      result = @builder.ivar(val[0])
                    
    result
end

def _reduce_450(val, _values, result)
                      result = @builder.gvar(val[0])
                    
    result
end

def _reduce_451(val, _values, result)
                      result = @builder.const(val[0])
                    
    result
end

def _reduce_452(val, _values, result)
                      result = @builder.cvar(val[0])
                    
    result
end

def _reduce_453(val, _values, result)
                      result = @builder.nil(val[0])
                    
    result
end

def _reduce_454(val, _values, result)
                      result = @builder.self(val[0])
                    
    result
end

def _reduce_455(val, _values, result)
                      result = @builder.true(val[0])
                    
    result
end

def _reduce_456(val, _values, result)
                      result = @builder.false(val[0])
                    
    result
end

def _reduce_457(val, _values, result)
                      result = @builder.__FILE__(val[0])
                    
    result
end

def _reduce_458(val, _values, result)
                      result = @builder.__LINE__(val[0])
                    
    result
end

def _reduce_459(val, _values, result)
                      result = @builder.__ENCODING__(val[0])
                    
    result
end

def _reduce_460(val, _values, result)
                      result = @builder.accessible(val[0])
                    
    result
end

def _reduce_461(val, _values, result)
                      result = @builder.assignable(val[0])
                    
    result
end

def _reduce_462(val, _values, result)
                      result = @builder.nth_ref(val[0])
                    
    result
end

def _reduce_463(val, _values, result)
                      result = @builder.back_ref(val[0])
                    
    result
end

def _reduce_464(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_465(val, _values, result)
                      result = [ val[0], val[1] ]
                    
    result
end

def _reduce_466(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_467(val, _values, result)
                      result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
end

def _reduce_468(val, _values, result)
                      result = @builder.args(nil, val[0], nil)
                    
    result
end

def _reduce_469(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_470(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
end

def _reduce_471(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_472(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_474(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_475(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_476(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_477(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = val[0].
                                  concat(val[1])
                    
    result
end

def _reduce_481(val, _values, result)
                      result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_483(val, _values, result)
                      result = []
                    
    result
end

def _reduce_484(val, _values, result)
                      diagnostic :error, :argument_const, nil, val[0]
                    
    result
end

def _reduce_485(val, _values, result)
                      diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
end

def _reduce_486(val, _values, result)
                      diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
end

def _reduce_487(val, _values, result)
                      diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
end

# reduce 488 omitted

def _reduce_489(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.arg(val[0])
                    
    result
end

def _reduce_490(val, _values, result)
                      @static_env.declare val[2][0]

                      result = @builder.objc_kwarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_491(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.objc_kwarg(val[0], nil, val[1])
                    
    result
end

# reduce 492 omitted

def _reduce_493(val, _values, result)
                      result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
end

def _reduce_494(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_495(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_496(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_497(val, _values, result)
                      @static_env.declare val[0][0]

                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
end

def _reduce_498(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_499(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_500(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_501(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

# reduce 502 omitted

# reduce 503 omitted

def _reduce_504(val, _values, result)
                      @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
end

def _reduce_505(val, _values, result)
                      result = [ @builder.restarg(val[0]) ]
                    
    result
end

# reduce 506 omitted

# reduce 507 omitted

def _reduce_508(val, _values, result)
                      @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
end

def _reduce_509(val, _values, result)
                      result = [ val[1] ]
                    
    result
end

def _reduce_510(val, _values, result)
                      result = []
                    
    result
end

# reduce 511 omitted

def _reduce_512(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_513(val, _values, result)
                      result = []
                    
    result
end

# reduce 514 omitted

def _reduce_515(val, _values, result)
                      result = [ val[0] ]
                    
    result
end

def _reduce_516(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_517(val, _values, result)
                      result = @builder.pair(val[0], val[1], val[2])
                    
    result
end

def _reduce_518(val, _values, result)
                      result = @builder.pair_keyword(val[0], val[1])
                    
    result
end

# reduce 519 omitted

# reduce 520 omitted

# reduce 521 omitted

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

# reduce 529 omitted

# reduce 530 omitted

# reduce 531 omitted

# reduce 532 omitted

# reduce 533 omitted

# reduce 534 omitted

def _reduce_535(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_536(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 537 omitted

# reduce 538 omitted

# reduce 539 omitted

def _reduce_540(val, _values, result)
                    yyerrok
                  
    result
end

# reduce 541 omitted

# reduce 542 omitted

# reduce 543 omitted

def _reduce_544(val, _values, result)
                    result = nil
                  
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class RubyMotion
  end   # module Parser
